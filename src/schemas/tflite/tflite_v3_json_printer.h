#ifndef TFLITE_V3_JSON_PRINTER_H
#define TFLITE_V3_JSON_PRINTER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_printer.h"
#include "flatcc/flatcc_prologue.h"

/*
 * Prints the default root table or struct from a buffer which must have
 * the schema declared file identifier, if any. It is also possible to
 * call the type specific `print_json_as_root` function wich accepts an
 * optional identifier (or 0) as argument. The printer `ctx` object must
 * be initialized with the appropriate output type, or it can be 0 which
 * defaults to stdout. NOTE: `ctx` is not generally allowed to be null, only
 * here for a simplified interface.
 */
static int tflite_v3_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz);

static void tflite_CustomQuantization_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_QuantizationDetails_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void tflite_QuantizationDetails_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void tflite_QuantizationParameters_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_Tensor_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_BuiltinOptions_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void tflite_BuiltinOptions_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void tflite_Conv2DOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_Pool2DOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_DepthwiseConv2DOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ConcatEmbeddingsOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LSHProjectionOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SVDFOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_RNNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SequenceRNNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_BidirectionalSequenceRNNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_FullyConnectedOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SoftmaxOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ConcatenationOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_AddOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_MulOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_L2NormOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LocalResponseNormalizationOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LSTMOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_UnidirectionalSequenceLSTMOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_BidirectionalSequenceLSTMOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ResizeBilinearOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ResizeNearestNeighborOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_CallOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_PadOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_PadV2Options_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ReshapeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SpaceToBatchNDOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_BatchToSpaceNDOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SkipGramOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SpaceToDepthOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_DepthToSpaceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SubOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_DivOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_TopKV2Options_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_EmbeddingLookupSparseOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_GatherOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_TransposeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ExpOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_CosOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ReducerOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SqueezeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SplitOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SplitVOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_StridedSliceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LogSoftmaxOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_CastOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_DequantizeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_MaximumMinimumOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_TileOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ArgMaxOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ArgMinOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_GreaterOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_GreaterEqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LessOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LessEqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_NegOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SelectOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SliceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_TransposeConvOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ExpandDimsOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SparseToDenseOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_EqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_NotEqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ShapeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_RankOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_PowOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_FakeQuantOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_PackOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LogicalOrOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_OneHotOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_AbsOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_HardSwishOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LogicalAndOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LogicalNotOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_UnpackOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_FloorDivOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SquareOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ZerosLikeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_FillOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_FloorModOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_RangeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_LeakyReluOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SquaredDifferenceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_MirrorPadOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_UniqueOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ReverseV2Options_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_AddNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_GatherNdOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_WhereOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_ReverseSequenceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_MatrixDiagOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_QuantizeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_MatrixSetDiagOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_IfOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_WhileOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_OperatorCode_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_Operator_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_SubGraph_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_Buffer_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_Metadata_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void tflite_Model_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);

static void tflite_TensorType_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "FLOAT32", 7); break;
    case 1: flatcc_json_printer_enum(ctx, "FLOAT16", 7); break;
    case 2: flatcc_json_printer_enum(ctx, "INT32", 5); break;
    case 3: flatcc_json_printer_enum(ctx, "UINT8", 5); break;
    case 4: flatcc_json_printer_enum(ctx, "INT64", 5); break;
    case 5: flatcc_json_printer_enum(ctx, "STRING", 6); break;
    case 6: flatcc_json_printer_enum(ctx, "BOOL", 4); break;
    case 7: flatcc_json_printer_enum(ctx, "INT16", 5); break;
    case 8: flatcc_json_printer_enum(ctx, "COMPLEX64", 9); break;
    case 9: flatcc_json_printer_enum(ctx, "INT8", 4); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_BuiltinOperator_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "ADD", 3); break;
    case 1: flatcc_json_printer_enum(ctx, "AVERAGE_POOL_2D", 15); break;
    case 2: flatcc_json_printer_enum(ctx, "CONCATENATION", 13); break;
    case 3: flatcc_json_printer_enum(ctx, "CONV_2D", 7); break;
    case 4: flatcc_json_printer_enum(ctx, "DEPTHWISE_CONV_2D", 17); break;
    case 5: flatcc_json_printer_enum(ctx, "DEPTH_TO_SPACE", 14); break;
    case 6: flatcc_json_printer_enum(ctx, "DEQUANTIZE", 10); break;
    case 7: flatcc_json_printer_enum(ctx, "EMBEDDING_LOOKUP", 16); break;
    case 8: flatcc_json_printer_enum(ctx, "FLOOR", 5); break;
    case 9: flatcc_json_printer_enum(ctx, "FULLY_CONNECTED", 15); break;
    case 10: flatcc_json_printer_enum(ctx, "HASHTABLE_LOOKUP", 16); break;
    case 11: flatcc_json_printer_enum(ctx, "L2_NORMALIZATION", 16); break;
    case 12: flatcc_json_printer_enum(ctx, "L2_POOL_2D", 10); break;
    case 13: flatcc_json_printer_enum(ctx, "LOCAL_RESPONSE_NORMALIZATION", 28); break;
    case 14: flatcc_json_printer_enum(ctx, "LOGISTIC", 8); break;
    case 15: flatcc_json_printer_enum(ctx, "LSH_PROJECTION", 14); break;
    case 16: flatcc_json_printer_enum(ctx, "LSTM", 4); break;
    case 17: flatcc_json_printer_enum(ctx, "MAX_POOL_2D", 11); break;
    case 18: flatcc_json_printer_enum(ctx, "MUL", 3); break;
    case 19: flatcc_json_printer_enum(ctx, "RELU", 4); break;
    case 20: flatcc_json_printer_enum(ctx, "RELU_N1_TO_1", 12); break;
    case 21: flatcc_json_printer_enum(ctx, "RELU6", 5); break;
    case 22: flatcc_json_printer_enum(ctx, "RESHAPE", 7); break;
    case 23: flatcc_json_printer_enum(ctx, "RESIZE_BILINEAR", 15); break;
    case 24: flatcc_json_printer_enum(ctx, "RNN", 3); break;
    case 25: flatcc_json_printer_enum(ctx, "SOFTMAX", 7); break;
    case 26: flatcc_json_printer_enum(ctx, "SPACE_TO_DEPTH", 14); break;
    case 27: flatcc_json_printer_enum(ctx, "SVDF", 4); break;
    case 28: flatcc_json_printer_enum(ctx, "TANH", 4); break;
    case 29: flatcc_json_printer_enum(ctx, "CONCAT_EMBEDDINGS", 17); break;
    case 30: flatcc_json_printer_enum(ctx, "SKIP_GRAM", 9); break;
    case 31: flatcc_json_printer_enum(ctx, "CALL", 4); break;
    case 32: flatcc_json_printer_enum(ctx, "CUSTOM", 6); break;
    case 33: flatcc_json_printer_enum(ctx, "EMBEDDING_LOOKUP_SPARSE", 23); break;
    case 34: flatcc_json_printer_enum(ctx, "PAD", 3); break;
    case 35: flatcc_json_printer_enum(ctx, "UNIDIRECTIONAL_SEQUENCE_RNN", 27); break;
    case 36: flatcc_json_printer_enum(ctx, "GATHER", 6); break;
    case 37: flatcc_json_printer_enum(ctx, "BATCH_TO_SPACE_ND", 17); break;
    case 38: flatcc_json_printer_enum(ctx, "SPACE_TO_BATCH_ND", 17); break;
    case 39: flatcc_json_printer_enum(ctx, "TRANSPOSE", 9); break;
    case 40: flatcc_json_printer_enum(ctx, "MEAN", 4); break;
    case 41: flatcc_json_printer_enum(ctx, "SUB", 3); break;
    case 42: flatcc_json_printer_enum(ctx, "DIV", 3); break;
    case 43: flatcc_json_printer_enum(ctx, "SQUEEZE", 7); break;
    case 44: flatcc_json_printer_enum(ctx, "UNIDIRECTIONAL_SEQUENCE_LSTM", 28); break;
    case 45: flatcc_json_printer_enum(ctx, "STRIDED_SLICE", 13); break;
    case 46: flatcc_json_printer_enum(ctx, "BIDIRECTIONAL_SEQUENCE_RNN", 26); break;
    case 47: flatcc_json_printer_enum(ctx, "EXP", 3); break;
    case 48: flatcc_json_printer_enum(ctx, "TOPK_V2", 7); break;
    case 49: flatcc_json_printer_enum(ctx, "SPLIT", 5); break;
    case 50: flatcc_json_printer_enum(ctx, "LOG_SOFTMAX", 11); break;
    case 51: flatcc_json_printer_enum(ctx, "DELEGATE", 8); break;
    case 52: flatcc_json_printer_enum(ctx, "BIDIRECTIONAL_SEQUENCE_LSTM", 27); break;
    case 53: flatcc_json_printer_enum(ctx, "CAST", 4); break;
    case 54: flatcc_json_printer_enum(ctx, "PRELU", 5); break;
    case 55: flatcc_json_printer_enum(ctx, "MAXIMUM", 7); break;
    case 56: flatcc_json_printer_enum(ctx, "ARG_MAX", 7); break;
    case 57: flatcc_json_printer_enum(ctx, "MINIMUM", 7); break;
    case 58: flatcc_json_printer_enum(ctx, "LESS", 4); break;
    case 59: flatcc_json_printer_enum(ctx, "NEG", 3); break;
    case 60: flatcc_json_printer_enum(ctx, "PADV2", 5); break;
    case 61: flatcc_json_printer_enum(ctx, "GREATER", 7); break;
    case 62: flatcc_json_printer_enum(ctx, "GREATER_EQUAL", 13); break;
    case 63: flatcc_json_printer_enum(ctx, "LESS_EQUAL", 10); break;
    case 64: flatcc_json_printer_enum(ctx, "SELECT", 6); break;
    case 65: flatcc_json_printer_enum(ctx, "SLICE", 5); break;
    case 66: flatcc_json_printer_enum(ctx, "SIN", 3); break;
    case 67: flatcc_json_printer_enum(ctx, "TRANSPOSE_CONV", 14); break;
    case 68: flatcc_json_printer_enum(ctx, "SPARSE_TO_DENSE", 15); break;
    case 69: flatcc_json_printer_enum(ctx, "TILE", 4); break;
    case 70: flatcc_json_printer_enum(ctx, "EXPAND_DIMS", 11); break;
    case 71: flatcc_json_printer_enum(ctx, "EQUAL", 5); break;
    case 72: flatcc_json_printer_enum(ctx, "NOT_EQUAL", 9); break;
    case 73: flatcc_json_printer_enum(ctx, "LOG", 3); break;
    case 74: flatcc_json_printer_enum(ctx, "SUM", 3); break;
    case 75: flatcc_json_printer_enum(ctx, "SQRT", 4); break;
    case 76: flatcc_json_printer_enum(ctx, "RSQRT", 5); break;
    case 77: flatcc_json_printer_enum(ctx, "SHAPE", 5); break;
    case 78: flatcc_json_printer_enum(ctx, "POW", 3); break;
    case 79: flatcc_json_printer_enum(ctx, "ARG_MIN", 7); break;
    case 80: flatcc_json_printer_enum(ctx, "FAKE_QUANT", 10); break;
    case 81: flatcc_json_printer_enum(ctx, "REDUCE_PROD", 11); break;
    case 82: flatcc_json_printer_enum(ctx, "REDUCE_MAX", 10); break;
    case 83: flatcc_json_printer_enum(ctx, "PACK", 4); break;
    case 84: flatcc_json_printer_enum(ctx, "LOGICAL_OR", 10); break;
    case 85: flatcc_json_printer_enum(ctx, "ONE_HOT", 7); break;
    case 86: flatcc_json_printer_enum(ctx, "LOGICAL_AND", 11); break;
    case 87: flatcc_json_printer_enum(ctx, "LOGICAL_NOT", 11); break;
    case 88: flatcc_json_printer_enum(ctx, "UNPACK", 6); break;
    case 89: flatcc_json_printer_enum(ctx, "REDUCE_MIN", 10); break;
    case 90: flatcc_json_printer_enum(ctx, "FLOOR_DIV", 9); break;
    case 91: flatcc_json_printer_enum(ctx, "REDUCE_ANY", 10); break;
    case 92: flatcc_json_printer_enum(ctx, "SQUARE", 6); break;
    case 93: flatcc_json_printer_enum(ctx, "ZEROS_LIKE", 10); break;
    case 94: flatcc_json_printer_enum(ctx, "FILL", 4); break;
    case 95: flatcc_json_printer_enum(ctx, "FLOOR_MOD", 9); break;
    case 96: flatcc_json_printer_enum(ctx, "RANGE", 5); break;
    case 97: flatcc_json_printer_enum(ctx, "RESIZE_NEAREST_NEIGHBOR", 23); break;
    case 98: flatcc_json_printer_enum(ctx, "LEAKY_RELU", 10); break;
    case 99: flatcc_json_printer_enum(ctx, "SQUARED_DIFFERENCE", 18); break;
    case 100: flatcc_json_printer_enum(ctx, "MIRROR_PAD", 10); break;
    case 101: flatcc_json_printer_enum(ctx, "ABS", 3); break;
    case 102: flatcc_json_printer_enum(ctx, "SPLIT_V", 7); break;
    case 103: flatcc_json_printer_enum(ctx, "UNIQUE", 6); break;
    case 104: flatcc_json_printer_enum(ctx, "CEIL", 4); break;
    case 105: flatcc_json_printer_enum(ctx, "REVERSE_V2", 10); break;
    case 106: flatcc_json_printer_enum(ctx, "ADD_N", 5); break;
    case 107: flatcc_json_printer_enum(ctx, "GATHER_ND", 9); break;
    case 108: flatcc_json_printer_enum(ctx, "COS", 3); break;
    case 109: flatcc_json_printer_enum(ctx, "WHERE", 5); break;
    case 110: flatcc_json_printer_enum(ctx, "RANK", 4); break;
    case 111: flatcc_json_printer_enum(ctx, "ELU", 3); break;
    case 112: flatcc_json_printer_enum(ctx, "REVERSE_SEQUENCE", 16); break;
    case 113: flatcc_json_printer_enum(ctx, "MATRIX_DIAG", 11); break;
    case 114: flatcc_json_printer_enum(ctx, "QUANTIZE", 8); break;
    case 115: flatcc_json_printer_enum(ctx, "MATRIX_SET_DIAG", 15); break;
    case 116: flatcc_json_printer_enum(ctx, "ROUND", 5); break;
    case 117: flatcc_json_printer_enum(ctx, "HARD_SWISH", 10); break;
    case 118: flatcc_json_printer_enum(ctx, "IF", 2); break;
    case 119: flatcc_json_printer_enum(ctx, "WHILE", 5); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_Padding_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "SAME", 4); break;
    case 1: flatcc_json_printer_enum(ctx, "VALID", 5); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_ActivationFunctionType_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "NONE", 4); break;
    case 1: flatcc_json_printer_enum(ctx, "RELU", 4); break;
    case 2: flatcc_json_printer_enum(ctx, "RELU_N1_TO_1", 12); break;
    case 3: flatcc_json_printer_enum(ctx, "RELU6", 5); break;
    case 4: flatcc_json_printer_enum(ctx, "TANH", 4); break;
    case 5: flatcc_json_printer_enum(ctx, "SIGN_BIT", 8); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_LSHProjectionType_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "UNKNOWN", 7); break;
    case 1: flatcc_json_printer_enum(ctx, "SPARSE", 6); break;
    case 2: flatcc_json_printer_enum(ctx, "DENSE", 5); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_FullyConnectedOptionsWeightsFormat_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "DEFAULT", 7); break;
    case 1: flatcc_json_printer_enum(ctx, "SHUFFLED4x16INT8", 16); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_LSTMKernelType_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "FULL", 4); break;
    case 1: flatcc_json_printer_enum(ctx, "BASIC", 5); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_CombinerType_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "SUM", 3); break;
    case 1: flatcc_json_printer_enum(ctx, "MEAN", 4); break;
    case 2: flatcc_json_printer_enum(ctx, "SQRTN", 5); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_MirrorPadMode_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "REFLECT", 7); break;
    case 1: flatcc_json_printer_enum(ctx, "SYMMETRIC", 9); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_CustomOptionsFormat_print_json_enum(flatcc_json_printer_t *ctx, int8_t v)
{

    switch (v) {
    case 0: flatcc_json_printer_enum(ctx, "FLEXBUFFERS", 11); break;
    default: flatcc_json_printer_int8(ctx, v); break;
    }
}

static void tflite_QuantizationDetails_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "CustomQuantization", 18);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void tflite_QuantizationDetails_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, tflite_CustomQuantization_print_json_table);
        break;
    default:
        break;
    }
}

static void tflite_BuiltinOptions_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "Conv2DOptions", 13);
        break;
    case 2:
        flatcc_json_printer_enum(ctx, "DepthwiseConv2DOptions", 22);
        break;
    case 3:
        flatcc_json_printer_enum(ctx, "ConcatEmbeddingsOptions", 23);
        break;
    case 4:
        flatcc_json_printer_enum(ctx, "LSHProjectionOptions", 20);
        break;
    case 5:
        flatcc_json_printer_enum(ctx, "Pool2DOptions", 13);
        break;
    case 6:
        flatcc_json_printer_enum(ctx, "SVDFOptions", 11);
        break;
    case 7:
        flatcc_json_printer_enum(ctx, "RNNOptions", 10);
        break;
    case 8:
        flatcc_json_printer_enum(ctx, "FullyConnectedOptions", 21);
        break;
    case 9:
        flatcc_json_printer_enum(ctx, "SoftmaxOptions", 14);
        break;
    case 10:
        flatcc_json_printer_enum(ctx, "ConcatenationOptions", 20);
        break;
    case 11:
        flatcc_json_printer_enum(ctx, "AddOptions", 10);
        break;
    case 12:
        flatcc_json_printer_enum(ctx, "L2NormOptions", 13);
        break;
    case 13:
        flatcc_json_printer_enum(ctx, "LocalResponseNormalizationOptions", 33);
        break;
    case 14:
        flatcc_json_printer_enum(ctx, "LSTMOptions", 11);
        break;
    case 15:
        flatcc_json_printer_enum(ctx, "ResizeBilinearOptions", 21);
        break;
    case 16:
        flatcc_json_printer_enum(ctx, "CallOptions", 11);
        break;
    case 17:
        flatcc_json_printer_enum(ctx, "ReshapeOptions", 14);
        break;
    case 18:
        flatcc_json_printer_enum(ctx, "SkipGramOptions", 15);
        break;
    case 19:
        flatcc_json_printer_enum(ctx, "SpaceToDepthOptions", 19);
        break;
    case 20:
        flatcc_json_printer_enum(ctx, "EmbeddingLookupSparseOptions", 28);
        break;
    case 21:
        flatcc_json_printer_enum(ctx, "MulOptions", 10);
        break;
    case 22:
        flatcc_json_printer_enum(ctx, "PadOptions", 10);
        break;
    case 23:
        flatcc_json_printer_enum(ctx, "GatherOptions", 13);
        break;
    case 24:
        flatcc_json_printer_enum(ctx, "BatchToSpaceNDOptions", 21);
        break;
    case 25:
        flatcc_json_printer_enum(ctx, "SpaceToBatchNDOptions", 21);
        break;
    case 26:
        flatcc_json_printer_enum(ctx, "TransposeOptions", 16);
        break;
    case 27:
        flatcc_json_printer_enum(ctx, "ReducerOptions", 14);
        break;
    case 28:
        flatcc_json_printer_enum(ctx, "SubOptions", 10);
        break;
    case 29:
        flatcc_json_printer_enum(ctx, "DivOptions", 10);
        break;
    case 30:
        flatcc_json_printer_enum(ctx, "SqueezeOptions", 14);
        break;
    case 31:
        flatcc_json_printer_enum(ctx, "SequenceRNNOptions", 18);
        break;
    case 32:
        flatcc_json_printer_enum(ctx, "StridedSliceOptions", 19);
        break;
    case 33:
        flatcc_json_printer_enum(ctx, "ExpOptions", 10);
        break;
    case 34:
        flatcc_json_printer_enum(ctx, "TopKV2Options", 13);
        break;
    case 35:
        flatcc_json_printer_enum(ctx, "SplitOptions", 12);
        break;
    case 36:
        flatcc_json_printer_enum(ctx, "LogSoftmaxOptions", 17);
        break;
    case 37:
        flatcc_json_printer_enum(ctx, "CastOptions", 11);
        break;
    case 38:
        flatcc_json_printer_enum(ctx, "DequantizeOptions", 17);
        break;
    case 39:
        flatcc_json_printer_enum(ctx, "MaximumMinimumOptions", 21);
        break;
    case 40:
        flatcc_json_printer_enum(ctx, "ArgMaxOptions", 13);
        break;
    case 41:
        flatcc_json_printer_enum(ctx, "LessOptions", 11);
        break;
    case 42:
        flatcc_json_printer_enum(ctx, "NegOptions", 10);
        break;
    case 43:
        flatcc_json_printer_enum(ctx, "PadV2Options", 12);
        break;
    case 44:
        flatcc_json_printer_enum(ctx, "GreaterOptions", 14);
        break;
    case 45:
        flatcc_json_printer_enum(ctx, "GreaterEqualOptions", 19);
        break;
    case 46:
        flatcc_json_printer_enum(ctx, "LessEqualOptions", 16);
        break;
    case 47:
        flatcc_json_printer_enum(ctx, "SelectOptions", 13);
        break;
    case 48:
        flatcc_json_printer_enum(ctx, "SliceOptions", 12);
        break;
    case 49:
        flatcc_json_printer_enum(ctx, "TransposeConvOptions", 20);
        break;
    case 50:
        flatcc_json_printer_enum(ctx, "SparseToDenseOptions", 20);
        break;
    case 51:
        flatcc_json_printer_enum(ctx, "TileOptions", 11);
        break;
    case 52:
        flatcc_json_printer_enum(ctx, "ExpandDimsOptions", 17);
        break;
    case 53:
        flatcc_json_printer_enum(ctx, "EqualOptions", 12);
        break;
    case 54:
        flatcc_json_printer_enum(ctx, "NotEqualOptions", 15);
        break;
    case 55:
        flatcc_json_printer_enum(ctx, "ShapeOptions", 12);
        break;
    case 56:
        flatcc_json_printer_enum(ctx, "PowOptions", 10);
        break;
    case 57:
        flatcc_json_printer_enum(ctx, "ArgMinOptions", 13);
        break;
    case 58:
        flatcc_json_printer_enum(ctx, "FakeQuantOptions", 16);
        break;
    case 59:
        flatcc_json_printer_enum(ctx, "PackOptions", 11);
        break;
    case 60:
        flatcc_json_printer_enum(ctx, "LogicalOrOptions", 16);
        break;
    case 61:
        flatcc_json_printer_enum(ctx, "OneHotOptions", 13);
        break;
    case 62:
        flatcc_json_printer_enum(ctx, "LogicalAndOptions", 17);
        break;
    case 63:
        flatcc_json_printer_enum(ctx, "LogicalNotOptions", 17);
        break;
    case 64:
        flatcc_json_printer_enum(ctx, "UnpackOptions", 13);
        break;
    case 65:
        flatcc_json_printer_enum(ctx, "FloorDivOptions", 15);
        break;
    case 66:
        flatcc_json_printer_enum(ctx, "SquareOptions", 13);
        break;
    case 67:
        flatcc_json_printer_enum(ctx, "ZerosLikeOptions", 16);
        break;
    case 68:
        flatcc_json_printer_enum(ctx, "FillOptions", 11);
        break;
    case 69:
        flatcc_json_printer_enum(ctx, "BidirectionalSequenceLSTMOptions", 32);
        break;
    case 70:
        flatcc_json_printer_enum(ctx, "BidirectionalSequenceRNNOptions", 31);
        break;
    case 71:
        flatcc_json_printer_enum(ctx, "UnidirectionalSequenceLSTMOptions", 33);
        break;
    case 72:
        flatcc_json_printer_enum(ctx, "FloorModOptions", 15);
        break;
    case 73:
        flatcc_json_printer_enum(ctx, "RangeOptions", 12);
        break;
    case 74:
        flatcc_json_printer_enum(ctx, "ResizeNearestNeighborOptions", 28);
        break;
    case 75:
        flatcc_json_printer_enum(ctx, "LeakyReluOptions", 16);
        break;
    case 76:
        flatcc_json_printer_enum(ctx, "SquaredDifferenceOptions", 24);
        break;
    case 77:
        flatcc_json_printer_enum(ctx, "MirrorPadOptions", 16);
        break;
    case 78:
        flatcc_json_printer_enum(ctx, "AbsOptions", 10);
        break;
    case 79:
        flatcc_json_printer_enum(ctx, "SplitVOptions", 13);
        break;
    case 80:
        flatcc_json_printer_enum(ctx, "UniqueOptions", 13);
        break;
    case 81:
        flatcc_json_printer_enum(ctx, "ReverseV2Options", 16);
        break;
    case 82:
        flatcc_json_printer_enum(ctx, "AddNOptions", 11);
        break;
    case 83:
        flatcc_json_printer_enum(ctx, "GatherNdOptions", 15);
        break;
    case 84:
        flatcc_json_printer_enum(ctx, "CosOptions", 10);
        break;
    case 85:
        flatcc_json_printer_enum(ctx, "WhereOptions", 12);
        break;
    case 86:
        flatcc_json_printer_enum(ctx, "RankOptions", 11);
        break;
    case 87:
        flatcc_json_printer_enum(ctx, "ReverseSequenceOptions", 22);
        break;
    case 88:
        flatcc_json_printer_enum(ctx, "MatrixDiagOptions", 17);
        break;
    case 89:
        flatcc_json_printer_enum(ctx, "QuantizeOptions", 15);
        break;
    case 90:
        flatcc_json_printer_enum(ctx, "MatrixSetDiagOptions", 20);
        break;
    case 91:
        flatcc_json_printer_enum(ctx, "HardSwishOptions", 16);
        break;
    case 92:
        flatcc_json_printer_enum(ctx, "IfOptions", 9);
        break;
    case 93:
        flatcc_json_printer_enum(ctx, "WhileOptions", 12);
        break;
    case 94:
        flatcc_json_printer_enum(ctx, "DepthToSpaceOptions", 19);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void tflite_BuiltinOptions_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, tflite_Conv2DOptions_print_json_table);
        break;
    case 2:
        flatcc_json_printer_union_table(ctx, ud, tflite_DepthwiseConv2DOptions_print_json_table);
        break;
    case 3:
        flatcc_json_printer_union_table(ctx, ud, tflite_ConcatEmbeddingsOptions_print_json_table);
        break;
    case 4:
        flatcc_json_printer_union_table(ctx, ud, tflite_LSHProjectionOptions_print_json_table);
        break;
    case 5:
        flatcc_json_printer_union_table(ctx, ud, tflite_Pool2DOptions_print_json_table);
        break;
    case 6:
        flatcc_json_printer_union_table(ctx, ud, tflite_SVDFOptions_print_json_table);
        break;
    case 7:
        flatcc_json_printer_union_table(ctx, ud, tflite_RNNOptions_print_json_table);
        break;
    case 8:
        flatcc_json_printer_union_table(ctx, ud, tflite_FullyConnectedOptions_print_json_table);
        break;
    case 9:
        flatcc_json_printer_union_table(ctx, ud, tflite_SoftmaxOptions_print_json_table);
        break;
    case 10:
        flatcc_json_printer_union_table(ctx, ud, tflite_ConcatenationOptions_print_json_table);
        break;
    case 11:
        flatcc_json_printer_union_table(ctx, ud, tflite_AddOptions_print_json_table);
        break;
    case 12:
        flatcc_json_printer_union_table(ctx, ud, tflite_L2NormOptions_print_json_table);
        break;
    case 13:
        flatcc_json_printer_union_table(ctx, ud, tflite_LocalResponseNormalizationOptions_print_json_table);
        break;
    case 14:
        flatcc_json_printer_union_table(ctx, ud, tflite_LSTMOptions_print_json_table);
        break;
    case 15:
        flatcc_json_printer_union_table(ctx, ud, tflite_ResizeBilinearOptions_print_json_table);
        break;
    case 16:
        flatcc_json_printer_union_table(ctx, ud, tflite_CallOptions_print_json_table);
        break;
    case 17:
        flatcc_json_printer_union_table(ctx, ud, tflite_ReshapeOptions_print_json_table);
        break;
    case 18:
        flatcc_json_printer_union_table(ctx, ud, tflite_SkipGramOptions_print_json_table);
        break;
    case 19:
        flatcc_json_printer_union_table(ctx, ud, tflite_SpaceToDepthOptions_print_json_table);
        break;
    case 20:
        flatcc_json_printer_union_table(ctx, ud, tflite_EmbeddingLookupSparseOptions_print_json_table);
        break;
    case 21:
        flatcc_json_printer_union_table(ctx, ud, tflite_MulOptions_print_json_table);
        break;
    case 22:
        flatcc_json_printer_union_table(ctx, ud, tflite_PadOptions_print_json_table);
        break;
    case 23:
        flatcc_json_printer_union_table(ctx, ud, tflite_GatherOptions_print_json_table);
        break;
    case 24:
        flatcc_json_printer_union_table(ctx, ud, tflite_BatchToSpaceNDOptions_print_json_table);
        break;
    case 25:
        flatcc_json_printer_union_table(ctx, ud, tflite_SpaceToBatchNDOptions_print_json_table);
        break;
    case 26:
        flatcc_json_printer_union_table(ctx, ud, tflite_TransposeOptions_print_json_table);
        break;
    case 27:
        flatcc_json_printer_union_table(ctx, ud, tflite_ReducerOptions_print_json_table);
        break;
    case 28:
        flatcc_json_printer_union_table(ctx, ud, tflite_SubOptions_print_json_table);
        break;
    case 29:
        flatcc_json_printer_union_table(ctx, ud, tflite_DivOptions_print_json_table);
        break;
    case 30:
        flatcc_json_printer_union_table(ctx, ud, tflite_SqueezeOptions_print_json_table);
        break;
    case 31:
        flatcc_json_printer_union_table(ctx, ud, tflite_SequenceRNNOptions_print_json_table);
        break;
    case 32:
        flatcc_json_printer_union_table(ctx, ud, tflite_StridedSliceOptions_print_json_table);
        break;
    case 33:
        flatcc_json_printer_union_table(ctx, ud, tflite_ExpOptions_print_json_table);
        break;
    case 34:
        flatcc_json_printer_union_table(ctx, ud, tflite_TopKV2Options_print_json_table);
        break;
    case 35:
        flatcc_json_printer_union_table(ctx, ud, tflite_SplitOptions_print_json_table);
        break;
    case 36:
        flatcc_json_printer_union_table(ctx, ud, tflite_LogSoftmaxOptions_print_json_table);
        break;
    case 37:
        flatcc_json_printer_union_table(ctx, ud, tflite_CastOptions_print_json_table);
        break;
    case 38:
        flatcc_json_printer_union_table(ctx, ud, tflite_DequantizeOptions_print_json_table);
        break;
    case 39:
        flatcc_json_printer_union_table(ctx, ud, tflite_MaximumMinimumOptions_print_json_table);
        break;
    case 40:
        flatcc_json_printer_union_table(ctx, ud, tflite_ArgMaxOptions_print_json_table);
        break;
    case 41:
        flatcc_json_printer_union_table(ctx, ud, tflite_LessOptions_print_json_table);
        break;
    case 42:
        flatcc_json_printer_union_table(ctx, ud, tflite_NegOptions_print_json_table);
        break;
    case 43:
        flatcc_json_printer_union_table(ctx, ud, tflite_PadV2Options_print_json_table);
        break;
    case 44:
        flatcc_json_printer_union_table(ctx, ud, tflite_GreaterOptions_print_json_table);
        break;
    case 45:
        flatcc_json_printer_union_table(ctx, ud, tflite_GreaterEqualOptions_print_json_table);
        break;
    case 46:
        flatcc_json_printer_union_table(ctx, ud, tflite_LessEqualOptions_print_json_table);
        break;
    case 47:
        flatcc_json_printer_union_table(ctx, ud, tflite_SelectOptions_print_json_table);
        break;
    case 48:
        flatcc_json_printer_union_table(ctx, ud, tflite_SliceOptions_print_json_table);
        break;
    case 49:
        flatcc_json_printer_union_table(ctx, ud, tflite_TransposeConvOptions_print_json_table);
        break;
    case 50:
        flatcc_json_printer_union_table(ctx, ud, tflite_SparseToDenseOptions_print_json_table);
        break;
    case 51:
        flatcc_json_printer_union_table(ctx, ud, tflite_TileOptions_print_json_table);
        break;
    case 52:
        flatcc_json_printer_union_table(ctx, ud, tflite_ExpandDimsOptions_print_json_table);
        break;
    case 53:
        flatcc_json_printer_union_table(ctx, ud, tflite_EqualOptions_print_json_table);
        break;
    case 54:
        flatcc_json_printer_union_table(ctx, ud, tflite_NotEqualOptions_print_json_table);
        break;
    case 55:
        flatcc_json_printer_union_table(ctx, ud, tflite_ShapeOptions_print_json_table);
        break;
    case 56:
        flatcc_json_printer_union_table(ctx, ud, tflite_PowOptions_print_json_table);
        break;
    case 57:
        flatcc_json_printer_union_table(ctx, ud, tflite_ArgMinOptions_print_json_table);
        break;
    case 58:
        flatcc_json_printer_union_table(ctx, ud, tflite_FakeQuantOptions_print_json_table);
        break;
    case 59:
        flatcc_json_printer_union_table(ctx, ud, tflite_PackOptions_print_json_table);
        break;
    case 60:
        flatcc_json_printer_union_table(ctx, ud, tflite_LogicalOrOptions_print_json_table);
        break;
    case 61:
        flatcc_json_printer_union_table(ctx, ud, tflite_OneHotOptions_print_json_table);
        break;
    case 62:
        flatcc_json_printer_union_table(ctx, ud, tflite_LogicalAndOptions_print_json_table);
        break;
    case 63:
        flatcc_json_printer_union_table(ctx, ud, tflite_LogicalNotOptions_print_json_table);
        break;
    case 64:
        flatcc_json_printer_union_table(ctx, ud, tflite_UnpackOptions_print_json_table);
        break;
    case 65:
        flatcc_json_printer_union_table(ctx, ud, tflite_FloorDivOptions_print_json_table);
        break;
    case 66:
        flatcc_json_printer_union_table(ctx, ud, tflite_SquareOptions_print_json_table);
        break;
    case 67:
        flatcc_json_printer_union_table(ctx, ud, tflite_ZerosLikeOptions_print_json_table);
        break;
    case 68:
        flatcc_json_printer_union_table(ctx, ud, tflite_FillOptions_print_json_table);
        break;
    case 69:
        flatcc_json_printer_union_table(ctx, ud, tflite_BidirectionalSequenceLSTMOptions_print_json_table);
        break;
    case 70:
        flatcc_json_printer_union_table(ctx, ud, tflite_BidirectionalSequenceRNNOptions_print_json_table);
        break;
    case 71:
        flatcc_json_printer_union_table(ctx, ud, tflite_UnidirectionalSequenceLSTMOptions_print_json_table);
        break;
    case 72:
        flatcc_json_printer_union_table(ctx, ud, tflite_FloorModOptions_print_json_table);
        break;
    case 73:
        flatcc_json_printer_union_table(ctx, ud, tflite_RangeOptions_print_json_table);
        break;
    case 74:
        flatcc_json_printer_union_table(ctx, ud, tflite_ResizeNearestNeighborOptions_print_json_table);
        break;
    case 75:
        flatcc_json_printer_union_table(ctx, ud, tflite_LeakyReluOptions_print_json_table);
        break;
    case 76:
        flatcc_json_printer_union_table(ctx, ud, tflite_SquaredDifferenceOptions_print_json_table);
        break;
    case 77:
        flatcc_json_printer_union_table(ctx, ud, tflite_MirrorPadOptions_print_json_table);
        break;
    case 78:
        flatcc_json_printer_union_table(ctx, ud, tflite_AbsOptions_print_json_table);
        break;
    case 79:
        flatcc_json_printer_union_table(ctx, ud, tflite_SplitVOptions_print_json_table);
        break;
    case 80:
        flatcc_json_printer_union_table(ctx, ud, tflite_UniqueOptions_print_json_table);
        break;
    case 81:
        flatcc_json_printer_union_table(ctx, ud, tflite_ReverseV2Options_print_json_table);
        break;
    case 82:
        flatcc_json_printer_union_table(ctx, ud, tflite_AddNOptions_print_json_table);
        break;
    case 83:
        flatcc_json_printer_union_table(ctx, ud, tflite_GatherNdOptions_print_json_table);
        break;
    case 84:
        flatcc_json_printer_union_table(ctx, ud, tflite_CosOptions_print_json_table);
        break;
    case 85:
        flatcc_json_printer_union_table(ctx, ud, tflite_WhereOptions_print_json_table);
        break;
    case 86:
        flatcc_json_printer_union_table(ctx, ud, tflite_RankOptions_print_json_table);
        break;
    case 87:
        flatcc_json_printer_union_table(ctx, ud, tflite_ReverseSequenceOptions_print_json_table);
        break;
    case 88:
        flatcc_json_printer_union_table(ctx, ud, tflite_MatrixDiagOptions_print_json_table);
        break;
    case 89:
        flatcc_json_printer_union_table(ctx, ud, tflite_QuantizeOptions_print_json_table);
        break;
    case 90:
        flatcc_json_printer_union_table(ctx, ud, tflite_MatrixSetDiagOptions_print_json_table);
        break;
    case 91:
        flatcc_json_printer_union_table(ctx, ud, tflite_HardSwishOptions_print_json_table);
        break;
    case 92:
        flatcc_json_printer_union_table(ctx, ud, tflite_IfOptions_print_json_table);
        break;
    case 93:
        flatcc_json_printer_union_table(ctx, ud, tflite_WhileOptions_print_json_table);
        break;
    case 94:
        flatcc_json_printer_union_table(ctx, ud, tflite_DepthToSpaceOptions_print_json_table);
        break;
    default:
        break;
    }
}

static void tflite_CustomQuantization_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_vector_field(ctx, td, 0, "custom", 6);
}

static inline int tflite_CustomQuantization_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_CustomQuantization_print_json_table);
}

static void tflite_QuantizationParameters_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_float_vector_field(ctx, td, 0, "min", 3);
    flatcc_json_printer_float_vector_field(ctx, td, 1, "max", 3);
    flatcc_json_printer_float_vector_field(ctx, td, 2, "scale", 5);
    flatcc_json_printer_int64_vector_field(ctx, td, 3, "zero_point", 10);
    flatcc_json_printer_union_field(ctx, td, 5, "details", 7, tflite_QuantizationDetails_print_json_union_type, tflite_QuantizationDetails_print_json_union);
    flatcc_json_printer_int32_field(ctx, td, 6, "quantized_dimension", 19, 0);
}

static inline int tflite_QuantizationParameters_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_QuantizationParameters_print_json_table);
}

static void tflite_Tensor_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_vector_field(ctx, td, 0, "shape", 5);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "type", 4, 0, tflite_TensorType_print_json_enum);
    flatcc_json_printer_uint32_field(ctx, td, 2, "buffer", 6, 0);
    flatcc_json_printer_string_field(ctx, td, 3, "name", 4);
    flatcc_json_printer_table_field(ctx, td, 4, "quantization", 12, tflite_QuantizationParameters_print_json_table);
    flatcc_json_printer_bool_field(ctx, td, 5, "is_variable", 11, 0);
}

static inline int tflite_Tensor_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Tensor_print_json_table);
}

static void tflite_Conv2DOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "padding", 7, 0, tflite_Padding_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 1, "stride_w", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 2, "stride_h", 8, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 3, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 4, "dilation_w_factor", 17, 1);
    flatcc_json_printer_int32_field(ctx, td, 5, "dilation_h_factor", 17, 1);
}

static inline int tflite_Conv2DOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Conv2DOptions_print_json_table);
}

static void tflite_Pool2DOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "padding", 7, 0, tflite_Padding_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 1, "stride_w", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 2, "stride_h", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 3, "filter_width", 12, 0);
    flatcc_json_printer_int32_field(ctx, td, 4, "filter_height", 13, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 5, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_Pool2DOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Pool2DOptions_print_json_table);
}

static void tflite_DepthwiseConv2DOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "padding", 7, 0, tflite_Padding_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 1, "stride_w", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 2, "stride_h", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 3, "depth_multiplier", 16, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 4, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 5, "dilation_w_factor", 17, 1);
    flatcc_json_printer_int32_field(ctx, td, 6, "dilation_h_factor", 17, 1);
}

static inline int tflite_DepthwiseConv2DOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_DepthwiseConv2DOptions_print_json_table);
}

static void tflite_ConcatEmbeddingsOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "num_channels", 12, 0);
    flatcc_json_printer_int32_vector_field(ctx, td, 1, "num_columns_per_channel", 23);
    flatcc_json_printer_int32_vector_field(ctx, td, 2, "embedding_dim_per_channel", 25);
}

static inline int tflite_ConcatEmbeddingsOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ConcatEmbeddingsOptions_print_json_table);
}

static void tflite_LSHProjectionOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "type", 4, 0, tflite_LSHProjectionType_print_json_enum);
}

static inline int tflite_LSHProjectionOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LSHProjectionOptions_print_json_table);
}

static void tflite_SVDFOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "rank", 4, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_SVDFOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SVDFOptions_print_json_table);
}

static void tflite_RNNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_RNNOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_RNNOptions_print_json_table);
}

static void tflite_SequenceRNNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 0, "time_major", 10, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_SequenceRNNOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SequenceRNNOptions_print_json_table);
}

static void tflite_BidirectionalSequenceRNNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 0, "time_major", 10, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_bool_field(ctx, td, 2, "merge_outputs", 13, 0);
}

static inline int tflite_BidirectionalSequenceRNNOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_BidirectionalSequenceRNNOptions_print_json_table);
}

static void tflite_FullyConnectedOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "weights_format", 14, 0, tflite_FullyConnectedOptionsWeightsFormat_print_json_enum);
    flatcc_json_printer_bool_field(ctx, td, 2, "keep_num_dims", 13, 0);
}

static inline int tflite_FullyConnectedOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_FullyConnectedOptions_print_json_table);
}

static void tflite_SoftmaxOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_float_field(ctx, td, 0, "beta", 4, 0.000000);
}

static inline int tflite_SoftmaxOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SoftmaxOptions_print_json_table);
}

static void tflite_ConcatenationOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "axis", 4, 0);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_ConcatenationOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ConcatenationOptions_print_json_table);
}

static void tflite_AddOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_AddOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_AddOptions_print_json_table);
}

static void tflite_MulOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_MulOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_MulOptions_print_json_table);
}

static void tflite_L2NormOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_L2NormOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_L2NormOptions_print_json_table);
}

static void tflite_LocalResponseNormalizationOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "radius", 6, 0);
    flatcc_json_printer_float_field(ctx, td, 1, "bias", 4, 0.000000);
    flatcc_json_printer_float_field(ctx, td, 2, "alpha", 5, 0.000000);
    flatcc_json_printer_float_field(ctx, td, 3, "beta", 4, 0.000000);
}

static inline int tflite_LocalResponseNormalizationOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LocalResponseNormalizationOptions_print_json_table);
}

static void tflite_LSTMOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_float_field(ctx, td, 1, "cell_clip", 9, 0.000000);
    flatcc_json_printer_float_field(ctx, td, 2, "proj_clip", 9, 0.000000);
    flatcc_json_printer_int8_enum_field(ctx, td, 3, "kernel_type", 11, 0, tflite_LSTMKernelType_print_json_enum);
}

static inline int tflite_LSTMOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LSTMOptions_print_json_table);
}

static void tflite_UnidirectionalSequenceLSTMOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_float_field(ctx, td, 1, "cell_clip", 9, 0.000000);
    flatcc_json_printer_float_field(ctx, td, 2, "proj_clip", 9, 0.000000);
    flatcc_json_printer_bool_field(ctx, td, 3, "time_major", 10, 0);
}

static inline int tflite_UnidirectionalSequenceLSTMOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_UnidirectionalSequenceLSTMOptions_print_json_table);
}

static void tflite_BidirectionalSequenceLSTMOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
    flatcc_json_printer_float_field(ctx, td, 1, "cell_clip", 9, 0.000000);
    flatcc_json_printer_float_field(ctx, td, 2, "proj_clip", 9, 0.000000);
    flatcc_json_printer_bool_field(ctx, td, 3, "merge_outputs", 13, 0);
    flatcc_json_printer_bool_field(ctx, td, 4, "time_major", 10, 1);
}

static inline int tflite_BidirectionalSequenceLSTMOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_BidirectionalSequenceLSTMOptions_print_json_table);
}

static void tflite_ResizeBilinearOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 2, "align_corners", 13, 0);
}

static inline int tflite_ResizeBilinearOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ResizeBilinearOptions_print_json_table);
}

static void tflite_ResizeNearestNeighborOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 0, "align_corners", 13, 0);
}

static inline int tflite_ResizeNearestNeighborOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ResizeNearestNeighborOptions_print_json_table);
}

static void tflite_CallOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint32_field(ctx, td, 0, "subgraph", 8, 0);
}

static inline int tflite_CallOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_CallOptions_print_json_table);
}

static void tflite_PadOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_PadOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_PadOptions_print_json_table);
}

static void tflite_PadV2Options_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_PadV2Options_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_PadV2Options_print_json_table);
}

static void tflite_ReshapeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_vector_field(ctx, td, 0, "new_shape", 9);
}

static inline int tflite_ReshapeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ReshapeOptions_print_json_table);
}

static void tflite_SpaceToBatchNDOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_SpaceToBatchNDOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SpaceToBatchNDOptions_print_json_table);
}

static void tflite_BatchToSpaceNDOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_BatchToSpaceNDOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_BatchToSpaceNDOptions_print_json_table);
}

static void tflite_SkipGramOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "ngram_size", 10, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "max_skip_size", 13, 0);
    flatcc_json_printer_bool_field(ctx, td, 2, "include_all_ngrams", 18, 0);
}

static inline int tflite_SkipGramOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SkipGramOptions_print_json_table);
}

static void tflite_SpaceToDepthOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "block_size", 10, 0);
}

static inline int tflite_SpaceToDepthOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SpaceToDepthOptions_print_json_table);
}

static void tflite_DepthToSpaceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "block_size", 10, 0);
}

static inline int tflite_DepthToSpaceOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_DepthToSpaceOptions_print_json_table);
}

static void tflite_SubOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_SubOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SubOptions_print_json_table);
}

static void tflite_DivOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "fused_activation_function", 25, 0, tflite_ActivationFunctionType_print_json_enum);
}

static inline int tflite_DivOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_DivOptions_print_json_table);
}

static void tflite_TopKV2Options_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_TopKV2Options_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_TopKV2Options_print_json_table);
}

static void tflite_EmbeddingLookupSparseOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "combiner", 8, 0, tflite_CombinerType_print_json_enum);
}

static inline int tflite_EmbeddingLookupSparseOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_EmbeddingLookupSparseOptions_print_json_table);
}

static void tflite_GatherOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "axis", 4, 0);
}

static inline int tflite_GatherOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_GatherOptions_print_json_table);
}

static void tflite_TransposeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_TransposeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_TransposeOptions_print_json_table);
}

static void tflite_ExpOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_ExpOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ExpOptions_print_json_table);
}

static void tflite_CosOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_CosOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_CosOptions_print_json_table);
}

static void tflite_ReducerOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 0, "keep_dims", 9, 0);
}

static inline int tflite_ReducerOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ReducerOptions_print_json_table);
}

static void tflite_SqueezeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_vector_field(ctx, td, 0, "squeeze_dims", 12);
}

static inline int tflite_SqueezeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SqueezeOptions_print_json_table);
}

static void tflite_SplitOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "num_splits", 10, 0);
}

static inline int tflite_SplitOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SplitOptions_print_json_table);
}

static void tflite_SplitVOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "num_splits", 10, 0);
}

static inline int tflite_SplitVOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SplitVOptions_print_json_table);
}

static void tflite_StridedSliceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "begin_mask", 10, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "end_mask", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 2, "ellipsis_mask", 13, 0);
    flatcc_json_printer_int32_field(ctx, td, 3, "new_axis_mask", 13, 0);
    flatcc_json_printer_int32_field(ctx, td, 4, "shrink_axis_mask", 16, 0);
}

static inline int tflite_StridedSliceOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_StridedSliceOptions_print_json_table);
}

static void tflite_LogSoftmaxOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_LogSoftmaxOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LogSoftmaxOptions_print_json_table);
}

static void tflite_CastOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "in_data_type", 12, 0, tflite_TensorType_print_json_enum);
    flatcc_json_printer_int8_enum_field(ctx, td, 1, "out_data_type", 13, 0, tflite_TensorType_print_json_enum);
}

static inline int tflite_CastOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_CastOptions_print_json_table);
}

static void tflite_DequantizeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_DequantizeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_DequantizeOptions_print_json_table);
}

static void tflite_MaximumMinimumOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_MaximumMinimumOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_MaximumMinimumOptions_print_json_table);
}

static void tflite_TileOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_TileOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_TileOptions_print_json_table);
}

static void tflite_ArgMaxOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "output_type", 11, 0, tflite_TensorType_print_json_enum);
}

static inline int tflite_ArgMaxOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ArgMaxOptions_print_json_table);
}

static void tflite_ArgMinOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "output_type", 11, 0, tflite_TensorType_print_json_enum);
}

static inline int tflite_ArgMinOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ArgMinOptions_print_json_table);
}

static void tflite_GreaterOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_GreaterOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_GreaterOptions_print_json_table);
}

static void tflite_GreaterEqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_GreaterEqualOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_GreaterEqualOptions_print_json_table);
}

static void tflite_LessOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_LessOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LessOptions_print_json_table);
}

static void tflite_LessEqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_LessEqualOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LessEqualOptions_print_json_table);
}

static void tflite_NegOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_NegOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_NegOptions_print_json_table);
}

static void tflite_SelectOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_SelectOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SelectOptions_print_json_table);
}

static void tflite_SliceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_SliceOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SliceOptions_print_json_table);
}

static void tflite_TransposeConvOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "padding", 7, 0, tflite_Padding_print_json_enum);
    flatcc_json_printer_int32_field(ctx, td, 1, "stride_w", 8, 0);
    flatcc_json_printer_int32_field(ctx, td, 2, "stride_h", 8, 0);
}

static inline int tflite_TransposeConvOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_TransposeConvOptions_print_json_table);
}

static void tflite_ExpandDimsOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_ExpandDimsOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ExpandDimsOptions_print_json_table);
}

static void tflite_SparseToDenseOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_bool_field(ctx, td, 0, "validate_indices", 16, 0);
}

static inline int tflite_SparseToDenseOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SparseToDenseOptions_print_json_table);
}

static void tflite_EqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_EqualOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_EqualOptions_print_json_table);
}

static void tflite_NotEqualOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_NotEqualOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_NotEqualOptions_print_json_table);
}

static void tflite_ShapeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "out_type", 8, 0, tflite_TensorType_print_json_enum);
}

static inline int tflite_ShapeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ShapeOptions_print_json_table);
}

static void tflite_RankOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_RankOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_RankOptions_print_json_table);
}

static void tflite_PowOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_PowOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_PowOptions_print_json_table);
}

static void tflite_FakeQuantOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_float_field(ctx, td, 0, "min", 3, 0.000000);
    flatcc_json_printer_float_field(ctx, td, 1, "max", 3, 0.000000);
    flatcc_json_printer_int32_field(ctx, td, 2, "num_bits", 8, 0);
    flatcc_json_printer_bool_field(ctx, td, 3, "narrow_range", 12, 0);
}

static inline int tflite_FakeQuantOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_FakeQuantOptions_print_json_table);
}

static void tflite_PackOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "values_count", 12, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "axis", 4, 0);
}

static inline int tflite_PackOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_PackOptions_print_json_table);
}

static void tflite_LogicalOrOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_LogicalOrOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LogicalOrOptions_print_json_table);
}

static void tflite_OneHotOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "axis", 4, 0);
}

static inline int tflite_OneHotOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_OneHotOptions_print_json_table);
}

static void tflite_AbsOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_AbsOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_AbsOptions_print_json_table);
}

static void tflite_HardSwishOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_HardSwishOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_HardSwishOptions_print_json_table);
}

static void tflite_LogicalAndOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_LogicalAndOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LogicalAndOptions_print_json_table);
}

static void tflite_LogicalNotOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_LogicalNotOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LogicalNotOptions_print_json_table);
}

static void tflite_UnpackOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "num", 3, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "axis", 4, 0);
}

static inline int tflite_UnpackOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_UnpackOptions_print_json_table);
}

static void tflite_FloorDivOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_FloorDivOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_FloorDivOptions_print_json_table);
}

static void tflite_SquareOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_SquareOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SquareOptions_print_json_table);
}

static void tflite_ZerosLikeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_ZerosLikeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ZerosLikeOptions_print_json_table);
}

static void tflite_FillOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_FillOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_FillOptions_print_json_table);
}

static void tflite_FloorModOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_FloorModOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_FloorModOptions_print_json_table);
}

static void tflite_RangeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_RangeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_RangeOptions_print_json_table);
}

static void tflite_LeakyReluOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_float_field(ctx, td, 0, "alpha", 5, 0.000000);
}

static inline int tflite_LeakyReluOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_LeakyReluOptions_print_json_table);
}

static void tflite_SquaredDifferenceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_SquaredDifferenceOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SquaredDifferenceOptions_print_json_table);
}

static void tflite_MirrorPadOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "mode", 4, 0, tflite_MirrorPadMode_print_json_enum);
}

static inline int tflite_MirrorPadOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_MirrorPadOptions_print_json_table);
}

static void tflite_UniqueOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "idx_out_type", 12, 2, tflite_TensorType_print_json_enum);
}

static inline int tflite_UniqueOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_UniqueOptions_print_json_table);
}

static void tflite_ReverseV2Options_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_ReverseV2Options_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ReverseV2Options_print_json_table);
}

static void tflite_AddNOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_AddNOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_AddNOptions_print_json_table);
}

static void tflite_GatherNdOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_GatherNdOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_GatherNdOptions_print_json_table);
}

static void tflite_WhereOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_WhereOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_WhereOptions_print_json_table);
}

static void tflite_ReverseSequenceOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "seq_dim", 7, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "batch_dim", 9, 0);
}

static inline int tflite_ReverseSequenceOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_ReverseSequenceOptions_print_json_table);
}

static void tflite_MatrixDiagOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_MatrixDiagOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_MatrixDiagOptions_print_json_table);
}

static void tflite_QuantizeOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_QuantizeOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_QuantizeOptions_print_json_table);
}

static void tflite_MatrixSetDiagOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
}

static inline int tflite_MatrixSetDiagOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_MatrixSetDiagOptions_print_json_table);
}

static void tflite_IfOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "then_subgraph_index", 19, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "else_subgraph_index", 19, 0);
}

static inline int tflite_IfOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_IfOptions_print_json_table);
}

static void tflite_WhileOptions_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "cond_subgraph_index", 19, 0);
    flatcc_json_printer_int32_field(ctx, td, 1, "body_subgraph_index", 19, 0);
}

static inline int tflite_WhileOptions_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_WhileOptions_print_json_table);
}

static void tflite_OperatorCode_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int8_enum_field(ctx, td, 0, "builtin_code", 12, 0, tflite_BuiltinOperator_print_json_enum);
    flatcc_json_printer_string_field(ctx, td, 1, "custom_code", 11);
    flatcc_json_printer_int32_field(ctx, td, 2, "version", 7, 1);
}

static inline int tflite_OperatorCode_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_OperatorCode_print_json_table);
}

static void tflite_Operator_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint32_field(ctx, td, 0, "opcode_index", 12, 0);
    flatcc_json_printer_int32_vector_field(ctx, td, 1, "inputs", 6);
    flatcc_json_printer_int32_vector_field(ctx, td, 2, "outputs", 7);
    flatcc_json_printer_union_field(ctx, td, 4, "builtin_options", 15, tflite_BuiltinOptions_print_json_union_type, tflite_BuiltinOptions_print_json_union);
    flatcc_json_printer_uint8_vector_field(ctx, td, 5, "custom_options", 14);
    flatcc_json_printer_int8_enum_field(ctx, td, 6, "custom_options_format", 21, 0, tflite_CustomOptionsFormat_print_json_enum);
    flatcc_json_printer_bool_vector_field(ctx, td, 7, "mutating_variable_inputs", 24);
    flatcc_json_printer_int32_vector_field(ctx, td, 8, "intermediates", 13);
}

static inline int tflite_Operator_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Operator_print_json_table);
}

static void tflite_SubGraph_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_vector_field(ctx, td, 0, "tensors", 7, tflite_Tensor_print_json_table);
    flatcc_json_printer_int32_vector_field(ctx, td, 1, "inputs", 6);
    flatcc_json_printer_int32_vector_field(ctx, td, 2, "outputs", 7);
    flatcc_json_printer_table_vector_field(ctx, td, 3, "operators", 9, tflite_Operator_print_json_table);
    flatcc_json_printer_string_field(ctx, td, 4, "name", 4);
}

static inline int tflite_SubGraph_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_SubGraph_print_json_table);
}

static void tflite_Buffer_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint8_vector_field(ctx, td, 0, "data", 4);
}

static inline int tflite_Buffer_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Buffer_print_json_table);
}

static void tflite_Metadata_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_uint32_field(ctx, td, 1, "buffer", 6, 0);
}

static inline int tflite_Metadata_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Metadata_print_json_table);
}

static void tflite_Model_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_uint32_field(ctx, td, 0, "version", 7, 0);
    flatcc_json_printer_table_vector_field(ctx, td, 1, "operator_codes", 14, tflite_OperatorCode_print_json_table);
    flatcc_json_printer_table_vector_field(ctx, td, 2, "subgraphs", 9, tflite_SubGraph_print_json_table);
    flatcc_json_printer_string_field(ctx, td, 3, "description", 11);
    flatcc_json_printer_table_vector_field(ctx, td, 4, "buffers", 7, tflite_Buffer_print_json_table);
    flatcc_json_printer_int32_vector_field(ctx, td, 5, "metadata_buffer", 15);
    flatcc_json_printer_table_vector_field(ctx, td, 6, "metadata", 8, tflite_Metadata_print_json_table);
}

static inline int tflite_Model_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, tflite_Model_print_json_table);
}

static int tflite_v3_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz)
{
    flatcc_json_printer_t printer;

    if (ctx == 0) {
        ctx = &printer;
        flatcc_json_printer_init(ctx, 0);
    }
    return tflite_Model_print_json_as_root(ctx, buf, bufsiz, "TFL3");
}

#include "flatcc/flatcc_epilogue.h"
#endif /* TFLITE_V3_JSON_PRINTER_H */
