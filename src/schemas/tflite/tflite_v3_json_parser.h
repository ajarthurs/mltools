#ifndef TFLITE_V3_JSON_PARSER_H
#define TFLITE_V3_JSON_PARSER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

/*
 * Parses the default root table or struct of the schema and constructs a FlatBuffer.
 *
 * Builder `B` must be initialized. `ctx` can be null but will hold
 * hold detailed error info on return when available.
 * Returns 0 on success, or error code.
 * `flags` : 0 by default, `flatcc_json_parser_f_skip_unknown` silently
 * ignores unknown table and structs fields, and union types.
 */
static int tflite_v3_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, int flags);

static const char *tflite_TensorType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_CustomQuantization_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_QuantizationDetails_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int tflite_QuantizationDetails_json_union_accept_type(uint8_t type);
static const char *tflite_QuantizationDetails_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_QuantizationParameters_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_Tensor_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_BuiltinOperator_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_BuiltinOptions_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int tflite_BuiltinOptions_json_union_accept_type(uint8_t type);
static const char *tflite_BuiltinOptions_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_Padding_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_ActivationFunctionType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_Conv2DOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_Pool2DOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_DepthwiseConv2DOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ConcatEmbeddingsOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LSHProjectionType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_LSHProjectionOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SVDFOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_RNNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SequenceRNNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_BidirectionalSequenceRNNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_FullyConnectedOptionsWeightsFormat_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_FullyConnectedOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SoftmaxOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ConcatenationOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_AddOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_MulOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_L2NormOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LocalResponseNormalizationOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LSTMKernelType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_LSTMOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_UnidirectionalSequenceLSTMOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_BidirectionalSequenceLSTMOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ResizeBilinearOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ResizeNearestNeighborOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_CallOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_PadOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_PadV2Options_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ReshapeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SpaceToBatchNDOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_BatchToSpaceNDOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SkipGramOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SpaceToDepthOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_DepthToSpaceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SubOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_DivOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_TopKV2Options_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_CombinerType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_EmbeddingLookupSparseOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_GatherOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_TransposeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ExpOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_CosOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ReducerOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SqueezeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SplitOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SplitVOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_StridedSliceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LogSoftmaxOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_CastOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_DequantizeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_MaximumMinimumOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_TileOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ArgMaxOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ArgMinOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_GreaterOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_GreaterEqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LessOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LessEqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_NegOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SelectOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SliceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_TransposeConvOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ExpandDimsOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SparseToDenseOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_EqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_NotEqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ShapeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_RankOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_PowOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_FakeQuantOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_PackOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LogicalOrOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_OneHotOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_AbsOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_HardSwishOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LogicalAndOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LogicalNotOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_UnpackOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_FloorDivOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SquareOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ZerosLikeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_FillOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_FloorModOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_RangeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_LeakyReluOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SquaredDifferenceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_MirrorPadMode_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_MirrorPadOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_UniqueOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ReverseV2Options_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_AddNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_GatherNdOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_WhereOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_ReverseSequenceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_MatrixDiagOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_QuantizeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_MatrixSetDiagOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_IfOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_WhileOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_OperatorCode_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_CustomOptionsFormat_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_Operator_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_SubGraph_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_Buffer_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_Metadata_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_Model_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *tflite_v3_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_v3_local_tflite_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *tflite_v3_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *tflite_TensorType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x494e543136000000) { /* branch "INT16" */
        if (w < 0x434f4d504c455836) { /* branch "COMPLEX6" */
            if ((w & 0xffffffff00000000) == 0x424f4f4c00000000) { /* "BOOL" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(6), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "BOOL" */
                return unmatched;
            } /* "BOOL" */
        } else { /* branch "COMPLEX6" */
            if (w < 0x464c4f4154313600) { /* branch "FLOAT16" */
                if (w == 0x434f4d504c455836) { /* descend "COMPLEX6" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x3400000000000000) { /* "4" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(8), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "4" */
                        return unmatched;
                    } /* "4" */
                } else { /* descend "COMPLEX6" */
                    return unmatched;
                } /* descend "COMPLEX6" */
            } else { /* branch "FLOAT16" */
                if ((w & 0xffffffffffffff00) == 0x464c4f4154333200) { /* "FLOAT32" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(0), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "FLOAT32" */
                    if ((w & 0xffffffffffffff00) == 0x464c4f4154313600) { /* "FLOAT16" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(1), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "FLOAT16" */
                        return unmatched;
                    } /* "FLOAT16" */
                } /* "FLOAT32" */
            } /* branch "FLOAT16" */
        } /* branch "COMPLEX6" */
    } else { /* branch "INT16" */
        if (w < 0x494e543634000000) { /* branch "INT64" */
            if ((w & 0xffffffffff000000) == 0x494e543332000000) { /* "INT32" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "INT32" */
                if ((w & 0xffffffffff000000) == 0x494e543136000000) { /* "INT16" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(7), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "INT16" */
                    return unmatched;
                } /* "INT16" */
            } /* "INT32" */
        } else { /* branch "INT64" */
            if (w < 0x494e543800000000) { /* branch "INT8" */
                if ((w & 0xffffffffff000000) == 0x494e543634000000) { /* "INT64" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(4), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "INT64" */
                    return unmatched;
                } /* "INT64" */
            } else { /* branch "INT8" */
                if (w < 0x535452494e470000) { /* branch "STRING" */
                    if ((w & 0xffffffff00000000) == 0x494e543800000000) { /* "INT8" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(9), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "INT8" */
                        return unmatched;
                    } /* "INT8" */
                } else { /* branch "STRING" */
                    if ((w & 0xffffffffff000000) == 0x55494e5438000000) { /* "UINT8" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(3), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "UINT8" */
                        if ((w & 0xffffffffffff0000) == 0x535452494e470000) { /* "STRING" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(5), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "STRING" */
                            return unmatched;
                        } /* "STRING" */
                    } /* "UINT8" */
                } /* branch "STRING" */
            } /* branch "INT8" */
        } /* branch "INT64" */
    } /* branch "INT16" */
    return buf;
}

static const char *tflite_CustomQuantization_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x637573746f6d0000) { /* "custom" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
            if (mark != buf) {
                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint8_write_to_pe(pval, val);
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "custom" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "custom" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_CustomQuantization_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_CustomQuantization_parse_json_table);
}

static const char *tflite_QuantizationDetails_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* CustomQuantization */
        buf = tflite_CustomQuantization_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int tflite_QuantizationDetails_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* CustomQuantization */
    default: return 0;
    }
}

static const char *tflite_QuantizationDetails_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x437573746f6d5175) { /* descend "CustomQu" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x616e74697a617469) { /* descend "antizati" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x6f6e000000000000) { /* "on" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "on" */
                return unmatched;
            } /* "on" */
        } else { /* descend "antizati" */
            return unmatched;
        } /* descend "antizati" */
    } else { /* descend "CustomQu" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } /* descend "CustomQu" */
    return buf;
}

static const char *tflite_QuantizationParameters_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 7)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d696e0000000000) { /* branch "min" */
            if (w == 0x64657461696c735f) { /* descend "details_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_QuantizationDetails_parse_json_enum,
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 5, h_unions, symbolic_parsers, tflite_QuantizationDetails_parse_json_union);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "type" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "type" */
            } else { /* descend "details_" */
                if ((w & 0xffffffffffffff00) == 0x64657461696c7300) { /* "details" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        buf = flatcc_json_parser_union(ctx, buf, end, 0, 5, h_unions, tflite_QuantizationDetails_parse_json_union);
                    } else {
                        goto pfguard1;
                    }
                } else { /* "details" */
                    goto pfguard1;
                } /* "details" */
                goto endpfguard1;
pfguard1:
                if ((w & 0xffffff0000000000) == 0x6d61780000000000) { /* "max" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_float_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "max" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "max" */
endpfguard1:
                (void)0;
            } /* descend "details_" */
        } else { /* branch "min" */
            if (w < 0x7175616e74697a65) { /* branch "quantize" */
                if ((w & 0xffffff0000000000) == 0x6d696e0000000000) { /* "min" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_float_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "min" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "min" */
            } else { /* branch "quantize" */
                if (w < 0x7363616c65000000) { /* branch "scale" */
                    if (w == 0x7175616e74697a65) { /* descend "quantize" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x645f64696d656e73) { /* descend "d_dimens" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffff0000000000) == 0x696f6e0000000000) { /* "ion" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                                if (mark != buf) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 4, 4))) goto failed;
                                        flatbuffers_int32_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "ion" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "ion" */
                        } else { /* descend "d_dimens" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "d_dimens" */
                    } else { /* descend "quantize" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "quantize" */
                } else { /* branch "scale" */
                    if ((w & 0xffffffffff000000) == 0x7363616c65000000) { /* "scale" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                float val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_float_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            goto pfguard2;
                        }
                    } else { /* "scale" */
                        goto pfguard2;
                    } /* "scale" */
                    goto endpfguard2;
pfguard2:
                    if (w == 0x7a65726f5f706f69) { /* descend "zero_poi" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6e74000000000000) { /* "nt" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 8, 8, UINT64_C(536870911))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int64_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "nt" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "nt" */
                    } else { /* descend "zero_poi" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "zero_poi" */
endpfguard2:
                    (void)0;
                } /* branch "scale" */
            } /* branch "quantize" */
        } /* branch "min" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_QuantizationParameters_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_QuantizationParameters_parse_json_table);
}

static const char *tflite_Tensor_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 6)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e616d6500000000) { /* branch "name" */
            if ((w & 0xffffffffffff0000) == 0x6275666665720000) { /* "buffer" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    goto pfguard1;
                }
            } else { /* "buffer" */
                goto pfguard1;
            } /* "buffer" */
            goto endpfguard1;
pfguard1:
            if (w == 0x69735f7661726961) { /* descend "is_varia" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x626c650000000000) { /* "ble" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 1, 1))) goto failed;
                            flatbuffers_bool_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ble" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ble" */
            } else { /* descend "is_varia" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "is_varia" */
endpfguard1:
            (void)0;
        } else { /* branch "name" */
            if (w < 0x7175616e74697a61) { /* branch "quantiza" */
                if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "name" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "name" */
            } else { /* branch "quantiza" */
                if (w < 0x7368617065000000) { /* branch "shape" */
                    if (w == 0x7175616e74697a61) { /* descend "quantiza" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffff00000000) == 0x74696f6e00000000) { /* "tion" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                buf = tflite_QuantizationParameters_parse_json_table(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "tion" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "tion" */
                    } else { /* descend "quantiza" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "quantiza" */
                } else { /* branch "shape" */
                    if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_TensorType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "type" */
                        if ((w & 0xffffffffff000000) == 0x7368617065000000) { /* "shape" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "shape" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "shape" */
                    } /* "type" */
                } /* branch "shape" */
            } /* branch "quantiza" */
        } /* branch "name" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Tensor_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Tensor_parse_json_table);
}

static const char *tflite_BuiltinOperator_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4d45414e00000000) { /* branch "MEAN" */
        if (w < 0x46494c4c00000000) { /* branch "FILL" */
            if (w < 0x434f4e565f324400) { /* branch "CONV_2D" */
                if (w < 0x42415443485f544f) { /* branch "BATCH_TO" */
                    if (w < 0x4144440000000000) { /* branch "ADD" */
                        if ((w & 0xffffff0000000000) == 0x4142530000000000) { /* "ABS" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(101), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "ABS" */
                            return unmatched;
                        } /* "ABS" */
                    } else { /* branch "ADD" */
                        if (w < 0x4152475f4d415800) { /* branch "ARG_MAX" */
                            if ((w & 0xffffffffff000000) == 0x4144445f4e000000) { /* "ADD_N" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(106), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ADD_N" */
                                if ((w & 0xffffff0000000000) == 0x4144440000000000) { /* "ADD" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(0), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ADD" */
                                    return unmatched;
                                } /* "ADD" */
                            } /* "ADD_N" */
                        } else { /* branch "ARG_MAX" */
                            if (w < 0x4152475f4d494e00) { /* branch "ARG_MIN" */
                                if ((w & 0xffffffffffffff00) == 0x4152475f4d415800) { /* "ARG_MAX" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(56), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ARG_MAX" */
                                    return unmatched;
                                } /* "ARG_MAX" */
                            } else { /* branch "ARG_MIN" */
                                if ((w & 0xffffffffffffff00) == 0x4152475f4d494e00) { /* "ARG_MIN" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(79), *value_sign = 0;
                                    } else {
                                        goto pfguard1;
                                    }
                                } else { /* "ARG_MIN" */
                                    goto pfguard1;
                                } /* "ARG_MIN" */
                                goto endpfguard1;
pfguard1:
                                if (w == 0x415645524147455f) { /* descend "AVERAGE_" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffffff00) == 0x504f4f4c5f324400) { /* "POOL_2D" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(1), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "POOL_2D" */
                                        return unmatched;
                                    } /* "POOL_2D" */
                                } else { /* descend "AVERAGE_" */
                                    return unmatched;
                                } /* descend "AVERAGE_" */
endpfguard1:
                                (void)0;
                            } /* branch "ARG_MIN" */
                        } /* branch "ARG_MAX" */
                    } /* branch "ADD" */
                } else { /* branch "BATCH_TO" */
                    if (w < 0x43414c4c00000000) { /* branch "CALL" */
                        if (w < 0x4249444952454354) { /* branch "BIDIRECT" */
                            if (w == 0x42415443485f544f) { /* descend "BATCH_TO" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x5f53504143455f4e) { /* descend "_SPACE_N" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x4400000000000000) { /* "D" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(37), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "D" */
                                        return unmatched;
                                    } /* "D" */
                                } else { /* descend "_SPACE_N" */
                                    return unmatched;
                                } /* descend "_SPACE_N" */
                            } else { /* descend "BATCH_TO" */
                                return unmatched;
                            } /* descend "BATCH_TO" */
                        } else { /* branch "BIDIRECT" */
                            if (w == 0x4249444952454354) { /* descend "BIDIRECT" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x494f4e414c5f5345) { /* descend "IONAL_SE" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x5155454e43455f4c) { /* descend "QUENCE_L" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffff0000000000) == 0x53544d0000000000) { /* "STM" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(52), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "STM" */
                                            return unmatched;
                                        } /* "STM" */
                                    } else { /* descend "QUENCE_L" */
                                        if (w == 0x5155454e43455f52) { /* descend "QUENCE_R" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffff000000000000) == 0x4e4e000000000000) { /* "NN" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(46), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "NN" */
                                                return unmatched;
                                            } /* "NN" */
                                        } else { /* descend "QUENCE_R" */
                                            return unmatched;
                                        } /* descend "QUENCE_R" */
                                    } /* descend "QUENCE_L" */
                                } else { /* descend "IONAL_SE" */
                                    return unmatched;
                                } /* descend "IONAL_SE" */
                            } else { /* descend "BIDIRECT" */
                                return unmatched;
                            } /* descend "BIDIRECT" */
                        } /* branch "BIDIRECT" */
                    } else { /* branch "CALL" */
                        if (w < 0x4345494c00000000) { /* branch "CEIL" */
                            if ((w & 0xffffffff00000000) == 0x4341535400000000) { /* "CAST" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(53), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "CAST" */
                                if ((w & 0xffffffff00000000) == 0x43414c4c00000000) { /* "CALL" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(31), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "CALL" */
                                    return unmatched;
                                } /* "CALL" */
                            } /* "CAST" */
                        } else { /* branch "CEIL" */
                            if (w < 0x434f4e434154454e) { /* branch "CONCATEN" */
                                if ((w & 0xffffffff00000000) == 0x4345494c00000000) { /* "CEIL" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(104), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "CEIL" */
                                    return unmatched;
                                } /* "CEIL" */
                            } else { /* branch "CONCATEN" */
                                if (w == 0x434f4e434154454e) { /* descend "CONCATEN" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x4154494f4e000000) { /* "ATION" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(2), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ATION" */
                                        return unmatched;
                                    } /* "ATION" */
                                } else { /* descend "CONCATEN" */
                                    if (w == 0x434f4e4341545f45) { /* descend "CONCAT_E" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x4d42454444494e47) { /* descend "MBEDDING" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xff00000000000000) == 0x5300000000000000) { /* "S" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(29), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "S" */
                                                return unmatched;
                                            } /* "S" */
                                        } else { /* descend "MBEDDING" */
                                            return unmatched;
                                        } /* descend "MBEDDING" */
                                    } else { /* descend "CONCAT_E" */
                                        return unmatched;
                                    } /* descend "CONCAT_E" */
                                } /* descend "CONCATEN" */
                            } /* branch "CONCATEN" */
                        } /* branch "CEIL" */
                    } /* branch "CALL" */
                } /* branch "BATCH_TO" */
            } else { /* branch "CONV_2D" */
                if (w < 0x4449560000000000) { /* branch "DIV" */
                    if (w < 0x44454c4547415445) { /* branch "DELEGATE" */
                        if (w < 0x434f530000000000) { /* branch "COS" */
                            if ((w & 0xffffffffffffff00) == 0x434f4e565f324400) { /* "CONV_2D" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(3), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "CONV_2D" */
                                return unmatched;
                            } /* "CONV_2D" */
                        } else { /* branch "COS" */
                            if ((w & 0xffffffffffff0000) == 0x435553544f4d0000) { /* "CUSTOM" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(32), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "CUSTOM" */
                                if ((w & 0xffffff0000000000) == 0x434f530000000000) { /* "COS" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(108), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "COS" */
                                    return unmatched;
                                } /* "COS" */
                            } /* "CUSTOM" */
                        } /* branch "COS" */
                    } else { /* branch "DELEGATE" */
                        if (w < 0x4445505448574953) { /* branch "DEPTHWIS" */
                            if (w == 0x44454c4547415445) { /* "DELEGATE" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(51), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "DELEGATE" */
                                return unmatched;
                            } /* "DELEGATE" */
                        } else { /* branch "DEPTHWIS" */
                            if (w < 0x44455054485f544f) { /* branch "DEPTH_TO" */
                                if (w == 0x4445505448574953) { /* descend "DEPTHWIS" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x455f434f4e565f32) { /* descend "E_CONV_2" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x4400000000000000) { /* "D" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(4), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "D" */
                                            return unmatched;
                                        } /* "D" */
                                    } else { /* descend "E_CONV_2" */
                                        return unmatched;
                                    } /* descend "E_CONV_2" */
                                } else { /* descend "DEPTHWIS" */
                                    return unmatched;
                                } /* descend "DEPTHWIS" */
                            } else { /* branch "DEPTH_TO" */
                                if (w == 0x44455054485f544f) { /* descend "DEPTH_TO" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffff0000) == 0x5f53504143450000) { /* "_SPACE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(5), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "_SPACE" */
                                        return unmatched;
                                    } /* "_SPACE" */
                                } else { /* descend "DEPTH_TO" */
                                    if (w == 0x44455155414e5449) { /* descend "DEQUANTI" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffff000000000000) == 0x5a45000000000000) { /* "ZE" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(6), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "ZE" */
                                            return unmatched;
                                        } /* "ZE" */
                                    } else { /* descend "DEQUANTI" */
                                        return unmatched;
                                    } /* descend "DEQUANTI" */
                                } /* descend "DEPTH_TO" */
                            } /* branch "DEPTH_TO" */
                        } /* branch "DEPTHWIS" */
                    } /* branch "DELEGATE" */
                } else { /* branch "DIV" */
                    if (w < 0x454d42454444494e) { /* branch "EMBEDDIN" */
                        if ((w & 0xffffff0000000000) == 0x454c550000000000) { /* "ELU" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(111), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "ELU" */
                            if ((w & 0xffffff0000000000) == 0x4449560000000000) { /* "DIV" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(42), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "DIV" */
                                return unmatched;
                            } /* "DIV" */
                        } /* "ELU" */
                    } else { /* branch "EMBEDDIN" */
                        if (w < 0x455155414c000000) { /* branch "EQUAL" */
                            if (w == 0x454d42454444494e) { /* descend "EMBEDDIN" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x475f4c4f4f4b5550) { /* descend "G_LOOKUP" */
                                    /* descend prefix key "G_LOOKUP" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(7), *value_sign = 0;
                                    } else {
                                        /* descend suffix "G_LOOKUP" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffffffffff00) == 0x5f53504152534500) { /* "_SPARSE" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(33), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "_SPARSE" */
                                            return unmatched;
                                        } /* "_SPARSE" */
                                    } /* desend suffix "G_LOOKUP" */
                                } else { /* descend "G_LOOKUP" */
                                    return unmatched;
                                } /* descend "G_LOOKUP" */
                            } else { /* descend "EMBEDDIN" */
                                return unmatched;
                            } /* descend "EMBEDDIN" */
                        } else { /* branch "EQUAL" */
                            if (w < 0x4558500000000000) { /* branch "EXP" */
                                if ((w & 0xffffffffff000000) == 0x455155414c000000) { /* "EQUAL" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(71), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "EQUAL" */
                                    return unmatched;
                                } /* "EQUAL" */
                            } else { /* branch "EXP" */
                                if (w == 0x455850414e445f44) { /* descend "EXPAND_D" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x494d530000000000) { /* "IMS" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(70), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "IMS" */
                                        return unmatched;
                                    } /* "IMS" */
                                } else { /* descend "EXPAND_D" */
                                    if ((w & 0xffffff0000000000) == 0x4558500000000000) { /* "EXP" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(47), *value_sign = 0;
                                        } else {
                                            goto pfguard2;
                                        }
                                    } else { /* "EXP" */
                                        goto pfguard2;
                                    } /* "EXP" */
                                    goto endpfguard2;
pfguard2:
                                    if (w == 0x46414b455f515541) { /* descend "FAKE_QUA" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffff000000000000) == 0x4e54000000000000) { /* "NT" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(80), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "NT" */
                                            return unmatched;
                                        } /* "NT" */
                                    } else { /* descend "FAKE_QUA" */
                                        return unmatched;
                                    } /* descend "FAKE_QUA" */
endpfguard2:
                                    (void)0;
                                } /* descend "EXPAND_D" */
                            } /* branch "EXP" */
                        } /* branch "EQUAL" */
                    } /* branch "EMBEDDIN" */
                } /* branch "DIV" */
            } /* branch "CONV_2D" */
        } else { /* branch "FILL" */
            if (w < 0x4c45414b595f5245) { /* branch "LEAKY_RE" */
                if (w < 0x4741544845520000) { /* branch "GATHER" */
                    if (w < 0x464c4f4f52000000) { /* branch "FLOOR" */
                        if ((w & 0xffffffff00000000) == 0x46494c4c00000000) { /* "FILL" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(94), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "FILL" */
                            return unmatched;
                        } /* "FILL" */
                    } else { /* branch "FLOOR" */
                        if (w == 0x464c4f4f525f4449) { /* descend "FLOOR_DI" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x5600000000000000) { /* "V" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(90), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "V" */
                                return unmatched;
                            } /* "V" */
                        } else { /* descend "FLOOR_DI" */
                            if ((w & 0xffffffffff000000) == 0x464c4f4f52000000) { /* "FLOOR" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(8), *value_sign = 0;
                                } else {
                                    goto pfguard3;
                                }
                            } else { /* "FLOOR" */
                                goto pfguard3;
                            } /* "FLOOR" */
                            goto endpfguard3;
pfguard3:
                            if (w == 0x464c4f4f525f4d4f) { /* descend "FLOOR_MO" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x4400000000000000) { /* "D" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(95), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "D" */
                                    return unmatched;
                                } /* "D" */
                            } else { /* descend "FLOOR_MO" */
                                if (w == 0x46554c4c595f434f) { /* descend "FULLY_CO" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffffff00) == 0x4e4e454354454400) { /* "NNECTED" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(9), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "NNECTED" */
                                        return unmatched;
                                    } /* "NNECTED" */
                                } else { /* descend "FULLY_CO" */
                                    return unmatched;
                                } /* descend "FULLY_CO" */
                            } /* descend "FLOOR_MO" */
endpfguard3:
                            (void)0;
                        } /* descend "FLOOR_DI" */
                    } /* branch "FLOOR" */
                } else { /* branch "GATHER" */
                    if (w < 0x484152445f535749) { /* branch "HARD_SWI" */
                        if (w == 0x4741544845525f4e) { /* descend "GATHER_N" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x4400000000000000) { /* "D" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(107), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "D" */
                                return unmatched;
                            } /* "D" */
                        } else { /* descend "GATHER_N" */
                            if ((w & 0xffffffffffff0000) == 0x4741544845520000) { /* "GATHER" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(36), *value_sign = 0;
                                } else {
                                    goto pfguard4;
                                }
                            } else { /* "GATHER" */
                                goto pfguard4;
                            } /* "GATHER" */
                            goto endpfguard4;
pfguard4:
                            if (w == 0x475245415445525f) { /* descend "GREATER_" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x455155414c000000) { /* "EQUAL" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(62), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "EQUAL" */
                                    return unmatched;
                                } /* "EQUAL" */
                            } else { /* descend "GREATER_" */
                                if ((w & 0xffffffffffffff00) == 0x4752454154455200) { /* "GREATER" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(61), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "GREATER" */
                                    return unmatched;
                                } /* "GREATER" */
                            } /* descend "GREATER_" */
endpfguard4:
                            (void)0;
                        } /* descend "GATHER_N" */
                    } else { /* branch "HARD_SWI" */
                        if (w < 0x4946000000000000) { /* branch "IF" */
                            if (w == 0x484152445f535749) { /* descend "HARD_SWI" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x5348000000000000) { /* "SH" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(117), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "SH" */
                                    return unmatched;
                                } /* "SH" */
                            } else { /* descend "HARD_SWI" */
                                if (w == 0x484153485441424c) { /* descend "HASHTABL" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x455f4c4f4f4b5550) { /* "E_LOOKUP" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(10), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "E_LOOKUP" */
                                        return unmatched;
                                    } /* "E_LOOKUP" */
                                } else { /* descend "HASHTABL" */
                                    return unmatched;
                                } /* descend "HASHTABL" */
                            } /* descend "HARD_SWI" */
                        } else { /* branch "IF" */
                            if (w < 0x4c325f4e4f524d41) { /* branch "L2_NORMA" */
                                if ((w & 0xffff000000000000) == 0x4946000000000000) { /* "IF" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(118), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "IF" */
                                    return unmatched;
                                } /* "IF" */
                            } else { /* branch "L2_NORMA" */
                                if (w == 0x4c325f4e4f524d41) { /* descend "L2_NORMA" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x4c495a4154494f4e) { /* "LIZATION" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(11), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "LIZATION" */
                                        return unmatched;
                                    } /* "LIZATION" */
                                } else { /* descend "L2_NORMA" */
                                    if (w == 0x4c325f504f4f4c5f) { /* descend "L2_POOL_" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffff000000000000) == 0x3244000000000000) { /* "2D" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(12), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "2D" */
                                            return unmatched;
                                        } /* "2D" */
                                    } else { /* descend "L2_POOL_" */
                                        return unmatched;
                                    } /* descend "L2_POOL_" */
                                } /* descend "L2_NORMA" */
                            } /* branch "L2_NORMA" */
                        } /* branch "IF" */
                    } /* branch "HARD_SWI" */
                } /* branch "GATHER" */
            } else { /* branch "LEAKY_RE" */
                if (w < 0x4c4f470000000000) { /* branch "LOG" */
                    if (w < 0x4c45535300000000) { /* branch "LESS" */
                        if (w == 0x4c45414b595f5245) { /* descend "LEAKY_RE" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x4c55000000000000) { /* "LU" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(98), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "LU" */
                                return unmatched;
                            } /* "LU" */
                        } else { /* descend "LEAKY_RE" */
                            return unmatched;
                        } /* descend "LEAKY_RE" */
                    } else { /* branch "LESS" */
                        if (w == 0x4c4553535f455155) { /* descend "LESS_EQU" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x414c000000000000) { /* "AL" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(63), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "AL" */
                                return unmatched;
                            } /* "AL" */
                        } else { /* descend "LESS_EQU" */
                            if ((w & 0xffffffff00000000) == 0x4c45535300000000) { /* "LESS" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(58), *value_sign = 0;
                                } else {
                                    goto pfguard5;
                                }
                            } else { /* "LESS" */
                                goto pfguard5;
                            } /* "LESS" */
                            goto endpfguard5;
pfguard5:
                            if (w == 0x4c4f43414c5f5245) { /* descend "LOCAL_RE" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x53504f4e53455f4e) { /* descend "SPONSE_N" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x4f524d414c495a41) { /* descend "ORMALIZA" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffff00000000) == 0x54494f4e00000000) { /* "TION" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(13), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "TION" */
                                            return unmatched;
                                        } /* "TION" */
                                    } else { /* descend "ORMALIZA" */
                                        return unmatched;
                                    } /* descend "ORMALIZA" */
                                } else { /* descend "SPONSE_N" */
                                    return unmatched;
                                } /* descend "SPONSE_N" */
                            } else { /* descend "LOCAL_RE" */
                                return unmatched;
                            } /* descend "LOCAL_RE" */
endpfguard5:
                            (void)0;
                        } /* descend "LESS_EQU" */
                    } /* branch "LESS" */
                } else { /* branch "LOG" */
                    if (w < 0x4c4f475f534f4654) { /* branch "LOG_SOFT" */
                        if (w == 0x4c4f474943414c5f) { /* descend "LOGICAL_" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w < 0x4e4f540000000000) { /* branch "NOT" */
                                if ((w & 0xffffff0000000000) == 0x414e440000000000) { /* "AND" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(86), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "AND" */
                                    return unmatched;
                                } /* "AND" */
                            } else { /* branch "NOT" */
                                if ((w & 0xffff000000000000) == 0x4f52000000000000) { /* "OR" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(84), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "OR" */
                                    if ((w & 0xffffff0000000000) == 0x4e4f540000000000) { /* "NOT" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(87), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "NOT" */
                                        return unmatched;
                                    } /* "NOT" */
                                } /* "OR" */
                            } /* branch "NOT" */
                        } else { /* descend "LOGICAL_" */
                            if ((w & 0xffffff0000000000) == 0x4c4f470000000000) { /* "LOG" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(73), *value_sign = 0;
                                } else {
                                    goto pfguard6;
                                }
                            } else { /* "LOG" */
                                goto pfguard6;
                            } /* "LOG" */
                            goto endpfguard6;
pfguard6:
                            if (w == 0x4c4f474953544943) { /* "LOGISTIC" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(14), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "LOGISTIC" */
                                return unmatched;
                            } /* "LOGISTIC" */
endpfguard6:
                            (void)0;
                        } /* descend "LOGICAL_" */
                    } else { /* branch "LOG_SOFT" */
                        if (w < 0x4d41545249585f44) { /* branch "MATRIX_D" */
                            if (w < 0x4c53485f50524f4a) { /* branch "LSH_PROJ" */
                                if (w == 0x4c4f475f534f4654) { /* descend "LOG_SOFT" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x4d41580000000000) { /* "MAX" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(50), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "MAX" */
                                        return unmatched;
                                    } /* "MAX" */
                                } else { /* descend "LOG_SOFT" */
                                    return unmatched;
                                } /* descend "LOG_SOFT" */
                            } else { /* branch "LSH_PROJ" */
                                if (w == 0x4c53485f50524f4a) { /* descend "LSH_PROJ" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffff0000) == 0x454354494f4e0000) { /* "ECTION" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(15), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ECTION" */
                                        return unmatched;
                                    } /* "ECTION" */
                                } else { /* descend "LSH_PROJ" */
                                    if ((w & 0xffffffff00000000) == 0x4c53544d00000000) { /* "LSTM" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(16), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "LSTM" */
                                        return unmatched;
                                    } /* "LSTM" */
                                } /* descend "LSH_PROJ" */
                            } /* branch "LSH_PROJ" */
                        } else { /* branch "MATRIX_D" */
                            if (w < 0x4d41545249585f53) { /* branch "MATRIX_S" */
                                if (w == 0x4d41545249585f44) { /* descend "MATRIX_D" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x4941470000000000) { /* "IAG" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(113), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "IAG" */
                                        return unmatched;
                                    } /* "IAG" */
                                } else { /* descend "MATRIX_D" */
                                    return unmatched;
                                } /* descend "MATRIX_D" */
                            } else { /* branch "MATRIX_S" */
                                if (w < 0x4d4158494d554d00) { /* branch "MAXIMUM" */
                                    if (w == 0x4d41545249585f53) { /* descend "MATRIX_S" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffffffffff00) == 0x45545f4449414700) { /* "ET_DIAG" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(115), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "ET_DIAG" */
                                            return unmatched;
                                        } /* "ET_DIAG" */
                                    } else { /* descend "MATRIX_S" */
                                        return unmatched;
                                    } /* descend "MATRIX_S" */
                                } else { /* branch "MAXIMUM" */
                                    if ((w & 0xffffffffffffff00) == 0x4d4158494d554d00) { /* "MAXIMUM" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(55), *value_sign = 0;
                                        } else {
                                            goto pfguard7;
                                        }
                                    } else { /* "MAXIMUM" */
                                        goto pfguard7;
                                    } /* "MAXIMUM" */
                                    goto endpfguard7;
pfguard7:
                                    if (w == 0x4d41585f504f4f4c) { /* descend "MAX_POOL" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffff0000000000) == 0x5f32440000000000) { /* "_2D" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(17), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "_2D" */
                                            return unmatched;
                                        } /* "_2D" */
                                    } else { /* descend "MAX_POOL" */
                                        return unmatched;
                                    } /* descend "MAX_POOL" */
endpfguard7:
                                    (void)0;
                                } /* branch "MAXIMUM" */
                            } /* branch "MATRIX_S" */
                        } /* branch "MATRIX_D" */
                    } /* branch "LOG_SOFT" */
                } /* branch "LOG" */
            } /* branch "LEAKY_RE" */
        } /* branch "FILL" */
    } else { /* branch "MEAN" */
        if (w < 0x53454c4543540000) { /* branch "SELECT" */
            if (w < 0x52414e4b00000000) { /* branch "RANK" */
                if (w < 0x4f4e455f484f5400) { /* branch "ONE_HOT" */
                    if (w < 0x4d4952524f525f50) { /* branch "MIRROR_P" */
                        if ((w & 0xffffffffffffff00) == 0x4d494e494d554d00) { /* "MINIMUM" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(57), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "MINIMUM" */
                            if ((w & 0xffffffff00000000) == 0x4d45414e00000000) { /* "MEAN" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(40), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "MEAN" */
                                return unmatched;
                            } /* "MEAN" */
                        } /* "MINIMUM" */
                    } else { /* branch "MIRROR_P" */
                        if (w < 0x4d554c0000000000) { /* branch "MUL" */
                            if (w == 0x4d4952524f525f50) { /* descend "MIRROR_P" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x4144000000000000) { /* "AD" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(100), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "AD" */
                                    return unmatched;
                                } /* "AD" */
                            } else { /* descend "MIRROR_P" */
                                return unmatched;
                            } /* descend "MIRROR_P" */
                        } else { /* branch "MUL" */
                            if (w < 0x4e45470000000000) { /* branch "NEG" */
                                if ((w & 0xffffff0000000000) == 0x4d554c0000000000) { /* "MUL" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(18), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "MUL" */
                                    return unmatched;
                                } /* "MUL" */
                            } else { /* branch "NEG" */
                                if ((w & 0xffffff0000000000) == 0x4e45470000000000) { /* "NEG" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(59), *value_sign = 0;
                                    } else {
                                        goto pfguard8;
                                    }
                                } else { /* "NEG" */
                                    goto pfguard8;
                                } /* "NEG" */
                                goto endpfguard8;
pfguard8:
                                if (w == 0x4e4f545f45515541) { /* descend "NOT_EQUA" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x4c00000000000000) { /* "L" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(72), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "L" */
                                        return unmatched;
                                    } /* "L" */
                                } else { /* descend "NOT_EQUA" */
                                    return unmatched;
                                } /* descend "NOT_EQUA" */
endpfguard8:
                                (void)0;
                            } /* branch "NEG" */
                        } /* branch "MUL" */
                    } /* branch "MIRROR_P" */
                } else { /* branch "ONE_HOT" */
                    if (w < 0x5041440000000000) { /* branch "PAD" */
                        if ((w & 0xffffffff00000000) == 0x5041434b00000000) { /* "PACK" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(83), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "PACK" */
                            if ((w & 0xffffffffffffff00) == 0x4f4e455f484f5400) { /* "ONE_HOT" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(85), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ONE_HOT" */
                                return unmatched;
                            } /* "ONE_HOT" */
                        } /* "PACK" */
                    } else { /* branch "PAD" */
                        if (w < 0x504f570000000000) { /* branch "POW" */
                            if ((w & 0xffffffffff000000) == 0x5041445632000000) { /* "PADV2" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(60), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "PADV2" */
                                if ((w & 0xffffff0000000000) == 0x5041440000000000) { /* "PAD" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(34), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "PAD" */
                                    return unmatched;
                                } /* "PAD" */
                            } /* "PADV2" */
                        } else { /* branch "POW" */
                            if (w < 0x5052454c55000000) { /* branch "PRELU" */
                                if ((w & 0xffffff0000000000) == 0x504f570000000000) { /* "POW" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(78), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "POW" */
                                    return unmatched;
                                } /* "POW" */
                            } else { /* branch "PRELU" */
                                if (w < 0x5155414e54495a45) { /* branch "QUANTIZE" */
                                    if ((w & 0xffffffffff000000) == 0x5052454c55000000) { /* "PRELU" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(54), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "PRELU" */
                                        return unmatched;
                                    } /* "PRELU" */
                                } else { /* branch "QUANTIZE" */
                                    if ((w & 0xffffffffff000000) == 0x52414e4745000000) { /* "RANGE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(96), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "RANGE" */
                                        if (w == 0x5155414e54495a45) { /* "QUANTIZE" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(114), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "QUANTIZE" */
                                            return unmatched;
                                        } /* "QUANTIZE" */
                                    } /* "RANGE" */
                                } /* branch "QUANTIZE" */
                            } /* branch "PRELU" */
                        } /* branch "POW" */
                    } /* branch "PAD" */
                } /* branch "ONE_HOT" */
            } else { /* branch "RANK" */
                if (w < 0x52454c555f4e315f) { /* branch "RELU_N1_" */
                    if (w < 0x5245445543455f4d) { /* branch "REDUCE_M" */
                        if ((w & 0xffffffff00000000) == 0x52414e4b00000000) { /* "RANK" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(110), *value_sign = 0;
                            } else {
                                goto pfguard9;
                            }
                        } else { /* "RANK" */
                            goto pfguard9;
                        } /* "RANK" */
                        goto endpfguard9;
pfguard9:
                        if (w == 0x5245445543455f41) { /* descend "REDUCE_A" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x4e59000000000000) { /* "NY" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(91), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "NY" */
                                return unmatched;
                            } /* "NY" */
                        } else { /* descend "REDUCE_A" */
                            return unmatched;
                        } /* descend "REDUCE_A" */
endpfguard9:
                        (void)0;
                    } else { /* branch "REDUCE_M" */
                        if (w < 0x5245445543455f50) { /* branch "REDUCE_P" */
                            if (w == 0x5245445543455f4d) { /* descend "REDUCE_M" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x494e000000000000) { /* "IN" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(89), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "IN" */
                                    if ((w & 0xffff000000000000) == 0x4158000000000000) { /* "AX" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(82), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "AX" */
                                        return unmatched;
                                    } /* "AX" */
                                } /* "IN" */
                            } else { /* descend "REDUCE_M" */
                                return unmatched;
                            } /* descend "REDUCE_M" */
                        } else { /* branch "REDUCE_P" */
                            if (w < 0x52454c5500000000) { /* branch "RELU" */
                                if (w == 0x5245445543455f50) { /* descend "REDUCE_P" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x524f440000000000) { /* "ROD" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(81), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ROD" */
                                        return unmatched;
                                    } /* "ROD" */
                                } else { /* descend "REDUCE_P" */
                                    return unmatched;
                                } /* descend "REDUCE_P" */
                            } else { /* branch "RELU" */
                                if ((w & 0xffffffffff000000) == 0x52454c5536000000) { /* "RELU6" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(21), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "RELU6" */
                                    if ((w & 0xffffffff00000000) == 0x52454c5500000000) { /* "RELU" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(19), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "RELU" */
                                        return unmatched;
                                    } /* "RELU" */
                                } /* "RELU6" */
                            } /* branch "RELU" */
                        } /* branch "REDUCE_P" */
                    } /* branch "REDUCE_M" */
                } else { /* branch "RELU_N1_" */
                    if (w < 0x524556455253455f) { /* branch "REVERSE_" */
                        if (w < 0x5245534841504500) { /* branch "RESHAPE" */
                            if (w == 0x52454c555f4e315f) { /* descend "RELU_N1_" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x544f5f3100000000) { /* "TO_1" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(20), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "TO_1" */
                                    return unmatched;
                                } /* "TO_1" */
                            } else { /* descend "RELU_N1_" */
                                return unmatched;
                            } /* descend "RELU_N1_" */
                        } else { /* branch "RESHAPE" */
                            if (w < 0x524553495a455f42) { /* branch "RESIZE_B" */
                                if ((w & 0xffffffffffffff00) == 0x5245534841504500) { /* "RESHAPE" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(22), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "RESHAPE" */
                                    return unmatched;
                                } /* "RESHAPE" */
                            } else { /* branch "RESIZE_B" */
                                if (w == 0x524553495a455f42) { /* descend "RESIZE_B" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffffff00) == 0x494c494e45415200) { /* "ILINEAR" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(23), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ILINEAR" */
                                        return unmatched;
                                    } /* "ILINEAR" */
                                } else { /* descend "RESIZE_B" */
                                    if (w == 0x524553495a455f4e) { /* descend "RESIZE_N" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x4541524553545f4e) { /* descend "EAREST_N" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffffffffffffff00) == 0x45494748424f5200) { /* "EIGHBOR" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(97), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "EIGHBOR" */
                                                return unmatched;
                                            } /* "EIGHBOR" */
                                        } else { /* descend "EAREST_N" */
                                            return unmatched;
                                        } /* descend "EAREST_N" */
                                    } else { /* descend "RESIZE_N" */
                                        return unmatched;
                                    } /* descend "RESIZE_N" */
                                } /* descend "RESIZE_B" */
                            } /* branch "RESIZE_B" */
                        } /* branch "RESHAPE" */
                    } else { /* branch "REVERSE_" */
                        if (w < 0x524e4e0000000000) { /* branch "RNN" */
                            if (w == 0x524556455253455f) { /* descend "REVERSE_" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x5632000000000000) { /* "V2" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(105), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "V2" */
                                    if (w == 0x53455155454e4345) { /* "SEQUENCE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(112), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "SEQUENCE" */
                                        return unmatched;
                                    } /* "SEQUENCE" */
                                } /* "V2" */
                            } else { /* descend "REVERSE_" */
                                return unmatched;
                            } /* descend "REVERSE_" */
                        } else { /* branch "RNN" */
                            if (w < 0x524f554e44000000) { /* branch "ROUND" */
                                if ((w & 0xffffff0000000000) == 0x524e4e0000000000) { /* "RNN" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(24), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "RNN" */
                                    return unmatched;
                                } /* "RNN" */
                            } else { /* branch "ROUND" */
                                if ((w & 0xffffffffff000000) == 0x5253515254000000) { /* "RSQRT" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(76), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "RSQRT" */
                                    if ((w & 0xffffffffff000000) == 0x524f554e44000000) { /* "ROUND" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(116), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ROUND" */
                                        return unmatched;
                                    } /* "ROUND" */
                                } /* "RSQRT" */
                            } /* branch "ROUND" */
                        } /* branch "RNN" */
                    } /* branch "REVERSE_" */
                } /* branch "RELU_N1_" */
            } /* branch "RANK" */
        } else { /* branch "SELECT" */
            if (w < 0x535452494445445f) { /* branch "STRIDED_" */
                if (w < 0x53504143455f544f) { /* branch "SPACE_TO" */
                    if (w < 0x53494e0000000000) { /* branch "SIN" */
                        if ((w & 0xffffffffff000000) == 0x5348415045000000) { /* "SHAPE" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(77), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "SHAPE" */
                            if ((w & 0xffffffffffff0000) == 0x53454c4543540000) { /* "SELECT" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(64), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "SELECT" */
                                return unmatched;
                            } /* "SELECT" */
                        } /* "SHAPE" */
                    } else { /* branch "SIN" */
                        if (w < 0x534b49505f475241) { /* branch "SKIP_GRA" */
                            if ((w & 0xffffff0000000000) == 0x53494e0000000000) { /* "SIN" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(66), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "SIN" */
                                return unmatched;
                            } /* "SIN" */
                        } else { /* branch "SKIP_GRA" */
                            if (w < 0x534c494345000000) { /* branch "SLICE" */
                                if (w == 0x534b49505f475241) { /* descend "SKIP_GRA" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x4d00000000000000) { /* "M" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(30), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "M" */
                                        return unmatched;
                                    } /* "M" */
                                } else { /* descend "SKIP_GRA" */
                                    return unmatched;
                                } /* descend "SKIP_GRA" */
                            } else { /* branch "SLICE" */
                                if ((w & 0xffffffffffffff00) == 0x534f46544d415800) { /* "SOFTMAX" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(25), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "SOFTMAX" */
                                    if ((w & 0xffffffffff000000) == 0x534c494345000000) { /* "SLICE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(65), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "SLICE" */
                                        return unmatched;
                                    } /* "SLICE" */
                                } /* "SOFTMAX" */
                            } /* branch "SLICE" */
                        } /* branch "SKIP_GRA" */
                    } /* branch "SIN" */
                } else { /* branch "SPACE_TO" */
                    if (w < 0x53504c4954000000) { /* branch "SPLIT" */
                        if (w == 0x53504143455f544f) { /* descend "SPACE_TO" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x5f42415443485f4e) { /* descend "_BATCH_N" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x4400000000000000) { /* "D" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(38), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "D" */
                                    return unmatched;
                                } /* "D" */
                            } else { /* descend "_BATCH_N" */
                                if ((w & 0xffffffffffff0000) == 0x5f44455054480000) { /* "_DEPTH" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(26), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "_DEPTH" */
                                    return unmatched;
                                } /* "_DEPTH" */
                            } /* descend "_BATCH_N" */
                        } else { /* descend "SPACE_TO" */
                            if (w == 0x5350415253455f54) { /* descend "SPARSE_T" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffffff00) == 0x4f5f44454e534500) { /* "O_DENSE" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(68), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "O_DENSE" */
                                    return unmatched;
                                } /* "O_DENSE" */
                            } else { /* descend "SPARSE_T" */
                                return unmatched;
                            } /* descend "SPARSE_T" */
                        } /* descend "SPACE_TO" */
                    } else { /* branch "SPLIT" */
                        if (w < 0x5351525400000000) { /* branch "SQRT" */
                            if ((w & 0xffffffffffffff00) == 0x53504c49545f5600) { /* "SPLIT_V" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(102), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "SPLIT_V" */
                                if ((w & 0xffffffffff000000) == 0x53504c4954000000) { /* "SPLIT" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(49), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "SPLIT" */
                                    return unmatched;
                                } /* "SPLIT" */
                            } /* "SPLIT_V" */
                        } else { /* branch "SQRT" */
                            if (w < 0x5351554152450000) { /* branch "SQUARE" */
                                if ((w & 0xffffffff00000000) == 0x5351525400000000) { /* "SQRT" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(75), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "SQRT" */
                                    return unmatched;
                                } /* "SQRT" */
                            } else { /* branch "SQUARE" */
                                if (w == 0x535155415245445f) { /* descend "SQUARED_" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x444946464552454e) { /* descend "DIFFEREN" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffff000000000000) == 0x4345000000000000) { /* "CE" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(99), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "CE" */
                                            return unmatched;
                                        } /* "CE" */
                                    } else { /* descend "DIFFEREN" */
                                        return unmatched;
                                    } /* descend "DIFFEREN" */
                                } else { /* descend "SQUARED_" */
                                    if ((w & 0xffffffffffff0000) == 0x5351554152450000) { /* "SQUARE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(92), *value_sign = 0;
                                        } else {
                                            goto pfguard10;
                                        }
                                    } else { /* "SQUARE" */
                                        goto pfguard10;
                                    } /* "SQUARE" */
                                    goto endpfguard10;
pfguard10:
                                    if ((w & 0xffffffffffffff00) == 0x53515545455a4500) { /* "SQUEEZE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(43), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "SQUEEZE" */
                                        return unmatched;
                                    } /* "SQUEEZE" */
endpfguard10:
                                    (void)0;
                                } /* descend "SQUARED_" */
                            } /* branch "SQUARE" */
                        } /* branch "SQRT" */
                    } /* branch "SPLIT" */
                } /* branch "SPACE_TO" */
            } else { /* branch "STRIDED_" */
                if (w < 0x5452414e53504f53) { /* branch "TRANSPOS" */
                    if (w < 0x5356444600000000) { /* branch "SVDF" */
                        if (w < 0x5355420000000000) { /* branch "SUB" */
                            if (w == 0x535452494445445f) { /* descend "STRIDED_" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x534c494345000000) { /* "SLICE" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(45), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "SLICE" */
                                    return unmatched;
                                } /* "SLICE" */
                            } else { /* descend "STRIDED_" */
                                return unmatched;
                            } /* descend "STRIDED_" */
                        } else { /* branch "SUB" */
                            if ((w & 0xffffff0000000000) == 0x53554d0000000000) { /* "SUM" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(74), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "SUM" */
                                if ((w & 0xffffff0000000000) == 0x5355420000000000) { /* "SUB" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(41), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "SUB" */
                                    return unmatched;
                                } /* "SUB" */
                            } /* "SUM" */
                        } /* branch "SUB" */
                    } else { /* branch "SVDF" */
                        if (w < 0x54414e4800000000) { /* branch "TANH" */
                            if ((w & 0xffffffff00000000) == 0x5356444600000000) { /* "SVDF" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(27), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "SVDF" */
                                return unmatched;
                            } /* "SVDF" */
                        } else { /* branch "TANH" */
                            if (w < 0x54494c4500000000) { /* branch "TILE" */
                                if ((w & 0xffffffff00000000) == 0x54414e4800000000) { /* "TANH" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(28), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "TANH" */
                                    return unmatched;
                                } /* "TANH" */
                            } else { /* branch "TILE" */
                                if ((w & 0xffffffffffffff00) == 0x544f504b5f563200) { /* "TOPK_V2" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(48), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "TOPK_V2" */
                                    if ((w & 0xffffffff00000000) == 0x54494c4500000000) { /* "TILE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(69), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "TILE" */
                                        return unmatched;
                                    } /* "TILE" */
                                } /* "TOPK_V2" */
                            } /* branch "TILE" */
                        } /* branch "TANH" */
                    } /* branch "SVDF" */
                } else { /* branch "TRANSPOS" */
                    if (w < 0x554e495155450000) { /* branch "UNIQUE" */
                        if (w == 0x5452414e53504f53) { /* descend "TRANSPOS" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffff0000) == 0x455f434f4e560000) { /* "E_CONV" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(67), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "E_CONV" */
                                if ((w & 0xff00000000000000) == 0x4500000000000000) { /* "E" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(39), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "E" */
                                    return unmatched;
                                } /* "E" */
                            } /* "E_CONV" */
                        } else { /* descend "TRANSPOS" */
                            if (w == 0x554e494449524543) { /* descend "UNIDIREC" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x54494f4e414c5f53) { /* descend "TIONAL_S" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x455155454e43455f) { /* descend "EQUENCE_" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffff0000000000) == 0x524e4e0000000000) { /* "RNN" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(35), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "RNN" */
                                            if ((w & 0xffffffff00000000) == 0x4c53544d00000000) { /* "LSTM" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(44), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "LSTM" */
                                                return unmatched;
                                            } /* "LSTM" */
                                        } /* "RNN" */
                                    } else { /* descend "EQUENCE_" */
                                        return unmatched;
                                    } /* descend "EQUENCE_" */
                                } else { /* descend "TIONAL_S" */
                                    return unmatched;
                                } /* descend "TIONAL_S" */
                            } else { /* descend "UNIDIREC" */
                                return unmatched;
                            } /* descend "UNIDIREC" */
                        } /* descend "TRANSPOS" */
                    } else { /* branch "UNIQUE" */
                        if (w < 0x5748455245000000) { /* branch "WHERE" */
                            if ((w & 0xffffffffffff0000) == 0x554e5041434b0000) { /* "UNPACK" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(88), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "UNPACK" */
                                if ((w & 0xffffffffffff0000) == 0x554e495155450000) { /* "UNIQUE" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(103), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "UNIQUE" */
                                    return unmatched;
                                } /* "UNIQUE" */
                            } /* "UNPACK" */
                        } else { /* branch "WHERE" */
                            if (w < 0x5748494c45000000) { /* branch "WHILE" */
                                if ((w & 0xffffffffff000000) == 0x5748455245000000) { /* "WHERE" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(109), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "WHERE" */
                                    return unmatched;
                                } /* "WHERE" */
                            } else { /* branch "WHILE" */
                                if ((w & 0xffffffffff000000) == 0x5748494c45000000) { /* "WHILE" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(119), *value_sign = 0;
                                    } else {
                                        goto pfguard11;
                                    }
                                } else { /* "WHILE" */
                                    goto pfguard11;
                                } /* "WHILE" */
                                goto endpfguard11;
pfguard11:
                                if (w == 0x5a45524f535f4c49) { /* descend "ZEROS_LI" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffff000000000000) == 0x4b45000000000000) { /* "KE" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(93), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "KE" */
                                        return unmatched;
                                    } /* "KE" */
                                } else { /* descend "ZEROS_LI" */
                                    return unmatched;
                                } /* descend "ZEROS_LI" */
endpfguard11:
                                (void)0;
                            } /* branch "WHILE" */
                        } /* branch "WHERE" */
                    } /* branch "UNIQUE" */
                } /* branch "TRANSPOS" */
            } /* branch "STRIDED_" */
        } /* branch "SELECT" */
    } /* branch "MEAN" */
    return buf;
}

static const char *tflite_BuiltinOptions_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* Conv2DOptions */
        buf = tflite_Conv2DOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* DepthwiseConv2DOptions */
        buf = tflite_DepthwiseConv2DOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 3: /* ConcatEmbeddingsOptions */
        buf = tflite_ConcatEmbeddingsOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 4: /* LSHProjectionOptions */
        buf = tflite_LSHProjectionOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 5: /* Pool2DOptions */
        buf = tflite_Pool2DOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 6: /* SVDFOptions */
        buf = tflite_SVDFOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 7: /* RNNOptions */
        buf = tflite_RNNOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 8: /* FullyConnectedOptions */
        buf = tflite_FullyConnectedOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 9: /* SoftmaxOptions */
        buf = tflite_SoftmaxOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 10: /* ConcatenationOptions */
        buf = tflite_ConcatenationOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 11: /* AddOptions */
        buf = tflite_AddOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 12: /* L2NormOptions */
        buf = tflite_L2NormOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 13: /* LocalResponseNormalizationOptions */
        buf = tflite_LocalResponseNormalizationOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 14: /* LSTMOptions */
        buf = tflite_LSTMOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 15: /* ResizeBilinearOptions */
        buf = tflite_ResizeBilinearOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 16: /* CallOptions */
        buf = tflite_CallOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 17: /* ReshapeOptions */
        buf = tflite_ReshapeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 18: /* SkipGramOptions */
        buf = tflite_SkipGramOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 19: /* SpaceToDepthOptions */
        buf = tflite_SpaceToDepthOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 20: /* EmbeddingLookupSparseOptions */
        buf = tflite_EmbeddingLookupSparseOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 21: /* MulOptions */
        buf = tflite_MulOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 22: /* PadOptions */
        buf = tflite_PadOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 23: /* GatherOptions */
        buf = tflite_GatherOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 24: /* BatchToSpaceNDOptions */
        buf = tflite_BatchToSpaceNDOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 25: /* SpaceToBatchNDOptions */
        buf = tflite_SpaceToBatchNDOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 26: /* TransposeOptions */
        buf = tflite_TransposeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 27: /* ReducerOptions */
        buf = tflite_ReducerOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 28: /* SubOptions */
        buf = tflite_SubOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 29: /* DivOptions */
        buf = tflite_DivOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 30: /* SqueezeOptions */
        buf = tflite_SqueezeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 31: /* SequenceRNNOptions */
        buf = tflite_SequenceRNNOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 32: /* StridedSliceOptions */
        buf = tflite_StridedSliceOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 33: /* ExpOptions */
        buf = tflite_ExpOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 34: /* TopKV2Options */
        buf = tflite_TopKV2Options_parse_json_table(ctx, buf, end, result);
        break;
    case 35: /* SplitOptions */
        buf = tflite_SplitOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 36: /* LogSoftmaxOptions */
        buf = tflite_LogSoftmaxOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 37: /* CastOptions */
        buf = tflite_CastOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 38: /* DequantizeOptions */
        buf = tflite_DequantizeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 39: /* MaximumMinimumOptions */
        buf = tflite_MaximumMinimumOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 40: /* ArgMaxOptions */
        buf = tflite_ArgMaxOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 41: /* LessOptions */
        buf = tflite_LessOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 42: /* NegOptions */
        buf = tflite_NegOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 43: /* PadV2Options */
        buf = tflite_PadV2Options_parse_json_table(ctx, buf, end, result);
        break;
    case 44: /* GreaterOptions */
        buf = tflite_GreaterOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 45: /* GreaterEqualOptions */
        buf = tflite_GreaterEqualOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 46: /* LessEqualOptions */
        buf = tflite_LessEqualOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 47: /* SelectOptions */
        buf = tflite_SelectOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 48: /* SliceOptions */
        buf = tflite_SliceOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 49: /* TransposeConvOptions */
        buf = tflite_TransposeConvOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 50: /* SparseToDenseOptions */
        buf = tflite_SparseToDenseOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 51: /* TileOptions */
        buf = tflite_TileOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 52: /* ExpandDimsOptions */
        buf = tflite_ExpandDimsOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 53: /* EqualOptions */
        buf = tflite_EqualOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 54: /* NotEqualOptions */
        buf = tflite_NotEqualOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 55: /* ShapeOptions */
        buf = tflite_ShapeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 56: /* PowOptions */
        buf = tflite_PowOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 57: /* ArgMinOptions */
        buf = tflite_ArgMinOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 58: /* FakeQuantOptions */
        buf = tflite_FakeQuantOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 59: /* PackOptions */
        buf = tflite_PackOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 60: /* LogicalOrOptions */
        buf = tflite_LogicalOrOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 61: /* OneHotOptions */
        buf = tflite_OneHotOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 62: /* LogicalAndOptions */
        buf = tflite_LogicalAndOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 63: /* LogicalNotOptions */
        buf = tflite_LogicalNotOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 64: /* UnpackOptions */
        buf = tflite_UnpackOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 65: /* FloorDivOptions */
        buf = tflite_FloorDivOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 66: /* SquareOptions */
        buf = tflite_SquareOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 67: /* ZerosLikeOptions */
        buf = tflite_ZerosLikeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 68: /* FillOptions */
        buf = tflite_FillOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 69: /* BidirectionalSequenceLSTMOptions */
        buf = tflite_BidirectionalSequenceLSTMOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 70: /* BidirectionalSequenceRNNOptions */
        buf = tflite_BidirectionalSequenceRNNOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 71: /* UnidirectionalSequenceLSTMOptions */
        buf = tflite_UnidirectionalSequenceLSTMOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 72: /* FloorModOptions */
        buf = tflite_FloorModOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 73: /* RangeOptions */
        buf = tflite_RangeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 74: /* ResizeNearestNeighborOptions */
        buf = tflite_ResizeNearestNeighborOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 75: /* LeakyReluOptions */
        buf = tflite_LeakyReluOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 76: /* SquaredDifferenceOptions */
        buf = tflite_SquaredDifferenceOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 77: /* MirrorPadOptions */
        buf = tflite_MirrorPadOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 78: /* AbsOptions */
        buf = tflite_AbsOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 79: /* SplitVOptions */
        buf = tflite_SplitVOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 80: /* UniqueOptions */
        buf = tflite_UniqueOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 81: /* ReverseV2Options */
        buf = tflite_ReverseV2Options_parse_json_table(ctx, buf, end, result);
        break;
    case 82: /* AddNOptions */
        buf = tflite_AddNOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 83: /* GatherNdOptions */
        buf = tflite_GatherNdOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 84: /* CosOptions */
        buf = tflite_CosOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 85: /* WhereOptions */
        buf = tflite_WhereOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 86: /* RankOptions */
        buf = tflite_RankOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 87: /* ReverseSequenceOptions */
        buf = tflite_ReverseSequenceOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 88: /* MatrixDiagOptions */
        buf = tflite_MatrixDiagOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 89: /* QuantizeOptions */
        buf = tflite_QuantizeOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 90: /* MatrixSetDiagOptions */
        buf = tflite_MatrixSetDiagOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 91: /* HardSwishOptions */
        buf = tflite_HardSwishOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 92: /* IfOptions */
        buf = tflite_IfOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 93: /* WhileOptions */
        buf = tflite_WhileOptions_parse_json_table(ctx, buf, end, result);
        break;
    case 94: /* DepthToSpaceOptions */
        buf = tflite_DepthToSpaceOptions_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int tflite_BuiltinOptions_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* Conv2DOptions */
    case 2: return 1; /* DepthwiseConv2DOptions */
    case 3: return 1; /* ConcatEmbeddingsOptions */
    case 4: return 1; /* LSHProjectionOptions */
    case 5: return 1; /* Pool2DOptions */
    case 6: return 1; /* SVDFOptions */
    case 7: return 1; /* RNNOptions */
    case 8: return 1; /* FullyConnectedOptions */
    case 9: return 1; /* SoftmaxOptions */
    case 10: return 1; /* ConcatenationOptions */
    case 11: return 1; /* AddOptions */
    case 12: return 1; /* L2NormOptions */
    case 13: return 1; /* LocalResponseNormalizationOptions */
    case 14: return 1; /* LSTMOptions */
    case 15: return 1; /* ResizeBilinearOptions */
    case 16: return 1; /* CallOptions */
    case 17: return 1; /* ReshapeOptions */
    case 18: return 1; /* SkipGramOptions */
    case 19: return 1; /* SpaceToDepthOptions */
    case 20: return 1; /* EmbeddingLookupSparseOptions */
    case 21: return 1; /* MulOptions */
    case 22: return 1; /* PadOptions */
    case 23: return 1; /* GatherOptions */
    case 24: return 1; /* BatchToSpaceNDOptions */
    case 25: return 1; /* SpaceToBatchNDOptions */
    case 26: return 1; /* TransposeOptions */
    case 27: return 1; /* ReducerOptions */
    case 28: return 1; /* SubOptions */
    case 29: return 1; /* DivOptions */
    case 30: return 1; /* SqueezeOptions */
    case 31: return 1; /* SequenceRNNOptions */
    case 32: return 1; /* StridedSliceOptions */
    case 33: return 1; /* ExpOptions */
    case 34: return 1; /* TopKV2Options */
    case 35: return 1; /* SplitOptions */
    case 36: return 1; /* LogSoftmaxOptions */
    case 37: return 1; /* CastOptions */
    case 38: return 1; /* DequantizeOptions */
    case 39: return 1; /* MaximumMinimumOptions */
    case 40: return 1; /* ArgMaxOptions */
    case 41: return 1; /* LessOptions */
    case 42: return 1; /* NegOptions */
    case 43: return 1; /* PadV2Options */
    case 44: return 1; /* GreaterOptions */
    case 45: return 1; /* GreaterEqualOptions */
    case 46: return 1; /* LessEqualOptions */
    case 47: return 1; /* SelectOptions */
    case 48: return 1; /* SliceOptions */
    case 49: return 1; /* TransposeConvOptions */
    case 50: return 1; /* SparseToDenseOptions */
    case 51: return 1; /* TileOptions */
    case 52: return 1; /* ExpandDimsOptions */
    case 53: return 1; /* EqualOptions */
    case 54: return 1; /* NotEqualOptions */
    case 55: return 1; /* ShapeOptions */
    case 56: return 1; /* PowOptions */
    case 57: return 1; /* ArgMinOptions */
    case 58: return 1; /* FakeQuantOptions */
    case 59: return 1; /* PackOptions */
    case 60: return 1; /* LogicalOrOptions */
    case 61: return 1; /* OneHotOptions */
    case 62: return 1; /* LogicalAndOptions */
    case 63: return 1; /* LogicalNotOptions */
    case 64: return 1; /* UnpackOptions */
    case 65: return 1; /* FloorDivOptions */
    case 66: return 1; /* SquareOptions */
    case 67: return 1; /* ZerosLikeOptions */
    case 68: return 1; /* FillOptions */
    case 69: return 1; /* BidirectionalSequenceLSTMOptions */
    case 70: return 1; /* BidirectionalSequenceRNNOptions */
    case 71: return 1; /* UnidirectionalSequenceLSTMOptions */
    case 72: return 1; /* FloorModOptions */
    case 73: return 1; /* RangeOptions */
    case 74: return 1; /* ResizeNearestNeighborOptions */
    case 75: return 1; /* LeakyReluOptions */
    case 76: return 1; /* SquaredDifferenceOptions */
    case 77: return 1; /* MirrorPadOptions */
    case 78: return 1; /* AbsOptions */
    case 79: return 1; /* SplitVOptions */
    case 80: return 1; /* UniqueOptions */
    case 81: return 1; /* ReverseV2Options */
    case 82: return 1; /* AddNOptions */
    case 83: return 1; /* GatherNdOptions */
    case 84: return 1; /* CosOptions */
    case 85: return 1; /* WhereOptions */
    case 86: return 1; /* RankOptions */
    case 87: return 1; /* ReverseSequenceOptions */
    case 88: return 1; /* MatrixDiagOptions */
    case 89: return 1; /* QuantizeOptions */
    case 90: return 1; /* MatrixSetDiagOptions */
    case 91: return 1; /* HardSwishOptions */
    case 92: return 1; /* IfOptions */
    case 93: return 1; /* WhileOptions */
    case 94: return 1; /* DepthToSpaceOptions */
    default: return 0;
    }
}

static const char *tflite_BuiltinOptions_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4d6972726f725061) { /* branch "MirrorPa" */
        if (w < 0x46696c6c4f707469) { /* branch "FillOpti" */
            if (w < 0x436f6e636174656e) { /* branch "Concaten" */
                if (w < 0x4261746368546f53) { /* branch "BatchToS" */
                    if (w < 0x4164644f7074696f) { /* branch "AddOptio" */
                        if (w == 0x4162734f7074696f) { /* descend "AbsOptio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(78), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ns" */
                                return unmatched;
                            } /* "ns" */
                        } else { /* descend "AbsOptio" */
                            if (w == 0x4164644e4f707469) { /* descend "AddNOpti" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(82), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ons" */
                                    return unmatched;
                                } /* "ons" */
                            } else { /* descend "AddNOpti" */
                                return unmatched;
                            } /* descend "AddNOpti" */
                        } /* descend "AbsOptio" */
                    } else { /* branch "AddOptio" */
                        if (w < 0x4172674d61784f70) { /* branch "ArgMaxOp" */
                            if (w == 0x4164644f7074696f) { /* descend "AddOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(11), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "AddOptio" */
                                return unmatched;
                            } /* descend "AddOptio" */
                        } else { /* branch "ArgMaxOp" */
                            if (w == 0x4172674d61784f70) { /* descend "ArgMaxOp" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(40), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "tions" */
                                    return unmatched;
                                } /* "tions" */
                            } else { /* descend "ArgMaxOp" */
                                if (w == 0x4172674d696e4f70) { /* descend "ArgMinOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(57), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "ArgMinOp" */
                                    return unmatched;
                                } /* descend "ArgMinOp" */
                            } /* descend "ArgMaxOp" */
                        } /* branch "ArgMaxOp" */
                    } /* branch "AddOptio" */
                } else { /* branch "BatchToS" */
                    if (w < 0x4269646972656374) { /* branch "Bidirect" */
                        if (w == 0x4261746368546f53) { /* descend "BatchToS" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x706163654e444f70) { /* descend "paceNDOp" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(24), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "tions" */
                                    return unmatched;
                                } /* "tions" */
                            } else { /* descend "paceNDOp" */
                                return unmatched;
                            } /* descend "paceNDOp" */
                        } else { /* descend "BatchToS" */
                            return unmatched;
                        } /* descend "BatchToS" */
                    } else { /* branch "Bidirect" */
                        if (w < 0x43616c6c4f707469) { /* branch "CallOpti" */
                            if (w == 0x4269646972656374) { /* descend "Bidirect" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x696f6e616c536571) { /* descend "ionalSeq" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x75656e63654c5354) { /* descend "uenceLST" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x4d4f7074696f6e73) { /* "MOptions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(69), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "MOptions" */
                                            return unmatched;
                                        } /* "MOptions" */
                                    } else { /* descend "uenceLST" */
                                        if (w == 0x75656e6365524e4e) { /* descend "uenceRNN" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(70), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "Options" */
                                                return unmatched;
                                            } /* "Options" */
                                        } else { /* descend "uenceRNN" */
                                            return unmatched;
                                        } /* descend "uenceRNN" */
                                    } /* descend "uenceLST" */
                                } else { /* descend "ionalSeq" */
                                    return unmatched;
                                } /* descend "ionalSeq" */
                            } else { /* descend "Bidirect" */
                                return unmatched;
                            } /* descend "Bidirect" */
                        } else { /* branch "CallOpti" */
                            if (w < 0x436173744f707469) { /* branch "CastOpti" */
                                if (w == 0x43616c6c4f707469) { /* descend "CallOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(16), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "CallOpti" */
                                    return unmatched;
                                } /* descend "CallOpti" */
                            } else { /* branch "CastOpti" */
                                if (w == 0x436173744f707469) { /* descend "CastOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(37), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "CastOpti" */
                                    if (w == 0x436f6e636174456d) { /* descend "ConcatEm" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x62656464696e6773) { /* descend "beddings" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(3), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "Options" */
                                                return unmatched;
                                            } /* "Options" */
                                        } else { /* descend "beddings" */
                                            return unmatched;
                                        } /* descend "beddings" */
                                    } else { /* descend "ConcatEm" */
                                        return unmatched;
                                    } /* descend "ConcatEm" */
                                } /* descend "CastOpti" */
                            } /* branch "CastOpti" */
                        } /* branch "CallOpti" */
                    } /* branch "Bidirect" */
                } /* branch "BatchToS" */
            } else { /* branch "Concaten" */
                if (w < 0x44657175616e7469) { /* branch "Dequanti" */
                    if (w < 0x436f734f7074696f) { /* branch "CosOptio" */
                        if (w == 0x436f6e636174656e) { /* descend "Concaten" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x6174696f6e4f7074) { /* descend "ationOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(10), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "ationOpt" */
                                return unmatched;
                            } /* descend "ationOpt" */
                        } else { /* descend "Concaten" */
                            if (w == 0x436f6e7632444f70) { /* descend "Conv2DOp" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(1), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "tions" */
                                    return unmatched;
                                } /* "tions" */
                            } else { /* descend "Conv2DOp" */
                                return unmatched;
                            } /* descend "Conv2DOp" */
                        } /* descend "Concaten" */
                    } else { /* branch "CosOptio" */
                        if (w < 0x4465707468546f53) { /* branch "DepthToS" */
                            if (w == 0x436f734f7074696f) { /* descend "CosOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(84), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "CosOptio" */
                                return unmatched;
                            } /* descend "CosOptio" */
                        } else { /* branch "DepthToS" */
                            if (w == 0x4465707468546f53) { /* descend "DepthToS" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x706163654f707469) { /* descend "paceOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(94), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "paceOpti" */
                                    return unmatched;
                                } /* descend "paceOpti" */
                            } else { /* descend "DepthToS" */
                                if (w == 0x4465707468776973) { /* descend "Depthwis" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x65436f6e7632444f) { /* descend "eConv2DO" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(2), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "ptions" */
                                            return unmatched;
                                        } /* "ptions" */
                                    } else { /* descend "eConv2DO" */
                                        return unmatched;
                                    } /* descend "eConv2DO" */
                                } else { /* descend "Depthwis" */
                                    return unmatched;
                                } /* descend "Depthwis" */
                            } /* descend "DepthToS" */
                        } /* branch "DepthToS" */
                    } /* branch "CosOptio" */
                } else { /* branch "Dequanti" */
                    if (w < 0x457175616c4f7074) { /* branch "EqualOpt" */
                        if (w < 0x4469764f7074696f) { /* branch "DivOptio" */
                            if (w == 0x44657175616e7469) { /* descend "Dequanti" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x7a654f7074696f6e) { /* descend "zeOption" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(38), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "s" */
                                        return unmatched;
                                    } /* "s" */
                                } else { /* descend "zeOption" */
                                    return unmatched;
                                } /* descend "zeOption" */
                            } else { /* descend "Dequanti" */
                                return unmatched;
                            } /* descend "Dequanti" */
                        } else { /* branch "DivOptio" */
                            if (w == 0x4469764f7074696f) { /* descend "DivOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(29), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "DivOptio" */
                                if (w == 0x456d62656464696e) { /* descend "Embeddin" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x674c6f6f6b757053) { /* descend "gLookupS" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x70617273654f7074) { /* descend "parseOpt" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(20), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "ions" */
                                                return unmatched;
                                            } /* "ions" */
                                        } else { /* descend "parseOpt" */
                                            return unmatched;
                                        } /* descend "parseOpt" */
                                    } else { /* descend "gLookupS" */
                                        return unmatched;
                                    } /* descend "gLookupS" */
                                } else { /* descend "Embeddin" */
                                    return unmatched;
                                } /* descend "Embeddin" */
                            } /* descend "DivOptio" */
                        } /* branch "DivOptio" */
                    } else { /* branch "EqualOpt" */
                        if (w < 0x4578704f7074696f) { /* branch "ExpOptio" */
                            if (w == 0x457175616c4f7074) { /* descend "EqualOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(53), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "EqualOpt" */
                                return unmatched;
                            } /* descend "EqualOpt" */
                        } else { /* branch "ExpOptio" */
                            if (w < 0x457870616e644469) { /* branch "ExpandDi" */
                                if (w == 0x4578704f7074696f) { /* descend "ExpOptio" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(33), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ns" */
                                        return unmatched;
                                    } /* "ns" */
                                } else { /* descend "ExpOptio" */
                                    return unmatched;
                                } /* descend "ExpOptio" */
                            } else { /* branch "ExpandDi" */
                                if (w == 0x457870616e644469) { /* descend "ExpandDi" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x6d734f7074696f6e) { /* descend "msOption" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(52), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "s" */
                                            return unmatched;
                                        } /* "s" */
                                    } else { /* descend "msOption" */
                                        return unmatched;
                                    } /* descend "msOption" */
                                } else { /* descend "ExpandDi" */
                                    if (w == 0x46616b655175616e) { /* descend "FakeQuan" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x744f7074696f6e73) { /* "tOptions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(58), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "tOptions" */
                                            return unmatched;
                                        } /* "tOptions" */
                                    } else { /* descend "FakeQuan" */
                                        return unmatched;
                                    } /* descend "FakeQuan" */
                                } /* descend "ExpandDi" */
                            } /* branch "ExpandDi" */
                        } /* branch "ExpOptio" */
                    } /* branch "EqualOpt" */
                } /* branch "Dequanti" */
            } /* branch "Concaten" */
        } else { /* branch "FillOpti" */
            if (w < 0x4c534850726f6a65) { /* branch "LSHProje" */
                if (w < 0x4761746865724f70) { /* branch "GatherOp" */
                    if (w < 0x466c6f6f724d6f64) { /* branch "FloorMod" */
                        if (w == 0x46696c6c4f707469) { /* descend "FillOpti" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(68), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ons" */
                                return unmatched;
                            } /* "ons" */
                        } else { /* descend "FillOpti" */
                            if (w == 0x466c6f6f72446976) { /* descend "FloorDiv" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(65), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "Options" */
                                    return unmatched;
                                } /* "Options" */
                            } else { /* descend "FloorDiv" */
                                return unmatched;
                            } /* descend "FloorDiv" */
                        } /* descend "FillOpti" */
                    } else { /* branch "FloorMod" */
                        if (w < 0x46756c6c79436f6e) { /* branch "FullyCon" */
                            if (w == 0x466c6f6f724d6f64) { /* descend "FloorMod" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(72), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "Options" */
                                    return unmatched;
                                } /* "Options" */
                            } else { /* descend "FloorMod" */
                                return unmatched;
                            } /* descend "FloorMod" */
                        } else { /* branch "FullyCon" */
                            if (w == 0x46756c6c79436f6e) { /* descend "FullyCon" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x6e65637465644f70) { /* descend "nectedOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(8), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "nectedOp" */
                                    return unmatched;
                                } /* descend "nectedOp" */
                            } else { /* descend "FullyCon" */
                                if (w == 0x4761746865724e64) { /* descend "GatherNd" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(83), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "Options" */
                                        return unmatched;
                                    } /* "Options" */
                                } else { /* descend "GatherNd" */
                                    return unmatched;
                                } /* descend "GatherNd" */
                            } /* descend "FullyCon" */
                        } /* branch "FullyCon" */
                    } /* branch "FloorMod" */
                } else { /* branch "GatherOp" */
                    if (w < 0x477265617465724f) { /* branch "GreaterO" */
                        if (w == 0x4761746865724f70) { /* descend "GatherOp" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(23), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "tions" */
                                return unmatched;
                            } /* "tions" */
                        } else { /* descend "GatherOp" */
                            if (w == 0x4772656174657245) { /* descend "GreaterE" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x7175616c4f707469) { /* descend "qualOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(45), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "qualOpti" */
                                    return unmatched;
                                } /* descend "qualOpti" */
                            } else { /* descend "GreaterE" */
                                return unmatched;
                            } /* descend "GreaterE" */
                        } /* descend "GatherOp" */
                    } else { /* branch "GreaterO" */
                        if (w < 0x4861726453776973) { /* branch "HardSwis" */
                            if (w == 0x477265617465724f) { /* descend "GreaterO" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(44), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ptions" */
                                    return unmatched;
                                } /* "ptions" */
                            } else { /* descend "GreaterO" */
                                return unmatched;
                            } /* descend "GreaterO" */
                        } else { /* branch "HardSwis" */
                            if (w < 0x49664f7074696f6e) { /* branch "IfOption" */
                                if (w == 0x4861726453776973) { /* descend "HardSwis" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x684f7074696f6e73) { /* "hOptions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(91), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "hOptions" */
                                        return unmatched;
                                    } /* "hOptions" */
                                } else { /* descend "HardSwis" */
                                    return unmatched;
                                } /* descend "HardSwis" */
                            } else { /* branch "IfOption" */
                                if (w == 0x49664f7074696f6e) { /* descend "IfOption" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(92), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "s" */
                                        return unmatched;
                                    } /* "s" */
                                } else { /* descend "IfOption" */
                                    if (w == 0x4c324e6f726d4f70) { /* descend "L2NormOp" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(12), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "tions" */
                                            return unmatched;
                                        } /* "tions" */
                                    } else { /* descend "L2NormOp" */
                                        return unmatched;
                                    } /* descend "L2NormOp" */
                                } /* descend "IfOption" */
                            } /* branch "IfOption" */
                        } /* branch "HardSwis" */
                    } /* branch "GreaterO" */
                } /* branch "GatherOp" */
            } else { /* branch "LSHProje" */
                if (w < 0x4c6f67536f66746d) { /* branch "LogSoftm" */
                    if (w < 0x4c65616b7952656c) { /* branch "LeakyRel" */
                        if (w == 0x4c534850726f6a65) { /* descend "LSHProje" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x6374696f6e4f7074) { /* descend "ctionOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(4), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "ctionOpt" */
                                return unmatched;
                            } /* descend "ctionOpt" */
                        } else { /* descend "LSHProje" */
                            if (w == 0x4c53544d4f707469) { /* descend "LSTMOpti" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(14), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ons" */
                                    return unmatched;
                                } /* "ons" */
                            } else { /* descend "LSTMOpti" */
                                return unmatched;
                            } /* descend "LSTMOpti" */
                        } /* descend "LSHProje" */
                    } else { /* branch "LeakyRel" */
                        if (w < 0x4c65737345717561) { /* branch "LessEqua" */
                            if (w == 0x4c65616b7952656c) { /* descend "LeakyRel" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x754f7074696f6e73) { /* "uOptions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(75), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "uOptions" */
                                    return unmatched;
                                } /* "uOptions" */
                            } else { /* descend "LeakyRel" */
                                return unmatched;
                            } /* descend "LeakyRel" */
                        } else { /* branch "LessEqua" */
                            if (w < 0x4c6573734f707469) { /* branch "LessOpti" */
                                if (w == 0x4c65737345717561) { /* descend "LessEqua" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x6c4f7074696f6e73) { /* "lOptions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(46), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "lOptions" */
                                        return unmatched;
                                    } /* "lOptions" */
                                } else { /* descend "LessEqua" */
                                    return unmatched;
                                } /* descend "LessEqua" */
                            } else { /* branch "LessOpti" */
                                if (w == 0x4c6573734f707469) { /* descend "LessOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(41), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "LessOpti" */
                                    if (w == 0x4c6f63616c526573) { /* descend "LocalRes" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x706f6e73654e6f72) { /* descend "ponseNor" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if (w == 0x6d616c697a617469) { /* descend "malizati" */
                                                buf += 8;
                                                w = flatcc_json_parser_symbol_part(buf, end);
                                                if (w == 0x6f6e4f7074696f6e) { /* descend "onOption" */
                                                    buf += 8;
                                                    w = flatcc_json_parser_symbol_part(buf, end);
                                                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                                        if (buf != mark) {
                                                            *value = UINT64_C(13), *value_sign = 0;
                                                        } else {
                                                            return unmatched;
                                                        }
                                                    } else { /* "s" */
                                                        return unmatched;
                                                    } /* "s" */
                                                } else { /* descend "onOption" */
                                                    return unmatched;
                                                } /* descend "onOption" */
                                            } else { /* descend "malizati" */
                                                return unmatched;
                                            } /* descend "malizati" */
                                        } else { /* descend "ponseNor" */
                                            return unmatched;
                                        } /* descend "ponseNor" */
                                    } else { /* descend "LocalRes" */
                                        return unmatched;
                                    } /* descend "LocalRes" */
                                } /* descend "LessOpti" */
                            } /* branch "LessOpti" */
                        } /* branch "LessEqua" */
                    } /* branch "LeakyRel" */
                } else { /* branch "LogSoftm" */
                    if (w < 0x4c6f676963616c4f) { /* branch "LogicalO" */
                        if (w < 0x4c6f676963616c41) { /* branch "LogicalA" */
                            if (w == 0x4c6f67536f66746d) { /* descend "LogSoftm" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x61784f7074696f6e) { /* descend "axOption" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(36), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "s" */
                                        return unmatched;
                                    } /* "s" */
                                } else { /* descend "axOption" */
                                    return unmatched;
                                } /* descend "axOption" */
                            } else { /* descend "LogSoftm" */
                                return unmatched;
                            } /* descend "LogSoftm" */
                        } else { /* branch "LogicalA" */
                            if (w == 0x4c6f676963616c41) { /* descend "LogicalA" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x6e644f7074696f6e) { /* descend "ndOption" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(62), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "s" */
                                        return unmatched;
                                    } /* "s" */
                                } else { /* descend "ndOption" */
                                    return unmatched;
                                } /* descend "ndOption" */
                            } else { /* descend "LogicalA" */
                                if (w == 0x4c6f676963616c4e) { /* descend "LogicalN" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x6f744f7074696f6e) { /* descend "otOption" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(63), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "s" */
                                            return unmatched;
                                        } /* "s" */
                                    } else { /* descend "otOption" */
                                        return unmatched;
                                    } /* descend "otOption" */
                                } else { /* descend "LogicalN" */
                                    return unmatched;
                                } /* descend "LogicalN" */
                            } /* descend "LogicalA" */
                        } /* branch "LogicalA" */
                    } else { /* branch "LogicalO" */
                        if (w < 0x4d61747269784469) { /* branch "MatrixDi" */
                            if (w == 0x4c6f676963616c4f) { /* descend "LogicalO" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x724f7074696f6e73) { /* "rOptions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(60), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "rOptions" */
                                    return unmatched;
                                } /* "rOptions" */
                            } else { /* descend "LogicalO" */
                                return unmatched;
                            } /* descend "LogicalO" */
                        } else { /* branch "MatrixDi" */
                            if (w < 0x4d61747269785365) { /* branch "MatrixSe" */
                                if (w == 0x4d61747269784469) { /* descend "MatrixDi" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x61674f7074696f6e) { /* descend "agOption" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(88), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "s" */
                                            return unmatched;
                                        } /* "s" */
                                    } else { /* descend "agOption" */
                                        return unmatched;
                                    } /* descend "agOption" */
                                } else { /* descend "MatrixDi" */
                                    return unmatched;
                                } /* descend "MatrixDi" */
                            } else { /* branch "MatrixSe" */
                                if (w == 0x4d61747269785365) { /* descend "MatrixSe" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x74446961674f7074) { /* descend "tDiagOpt" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(90), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "ions" */
                                            return unmatched;
                                        } /* "ions" */
                                    } else { /* descend "tDiagOpt" */
                                        return unmatched;
                                    } /* descend "tDiagOpt" */
                                } else { /* descend "MatrixSe" */
                                    if (w == 0x4d6178696d756d4d) { /* descend "MaximumM" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x696e696d756d4f70) { /* descend "inimumOp" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(39), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "tions" */
                                                return unmatched;
                                            } /* "tions" */
                                        } else { /* descend "inimumOp" */
                                            return unmatched;
                                        } /* descend "inimumOp" */
                                    } else { /* descend "MaximumM" */
                                        return unmatched;
                                    } /* descend "MaximumM" */
                                } /* descend "MatrixSe" */
                            } /* branch "MatrixSe" */
                        } /* branch "MatrixDi" */
                    } /* branch "LogicalO" */
                } /* branch "LogSoftm" */
            } /* branch "LSHProje" */
        } /* branch "FillOpti" */
    } else { /* branch "MirrorPa" */
        if (w < 0x53657175656e6365) { /* branch "Sequence" */
            if (w < 0x5175616e74697a65) { /* branch "Quantize" */
                if (w < 0x4f6e65486f744f70) { /* branch "OneHotOp" */
                    if (w < 0x4e4f4e4500000000) { /* branch "NONE" */
                        if (w == 0x4d6972726f725061) { /* descend "MirrorPa" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x644f7074696f6e73) { /* "dOptions" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(77), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "dOptions" */
                                return unmatched;
                            } /* "dOptions" */
                        } else { /* descend "MirrorPa" */
                            if (w == 0x4d756c4f7074696f) { /* descend "MulOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(21), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "MulOptio" */
                                return unmatched;
                            } /* descend "MulOptio" */
                        } /* descend "MirrorPa" */
                    } else { /* branch "NONE" */
                        if (w < 0x4e65674f7074696f) { /* branch "NegOptio" */
                            if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(0), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "NONE" */
                                return unmatched;
                            } /* "NONE" */
                        } else { /* branch "NegOptio" */
                            if (w == 0x4e65674f7074696f) { /* descend "NegOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(42), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "NegOptio" */
                                if (w == 0x4e6f74457175616c) { /* descend "NotEqual" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(54), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "Options" */
                                        return unmatched;
                                    } /* "Options" */
                                } else { /* descend "NotEqual" */
                                    return unmatched;
                                } /* descend "NotEqual" */
                            } /* descend "NegOptio" */
                        } /* branch "NegOptio" */
                    } /* branch "NONE" */
                } else { /* branch "OneHotOp" */
                    if (w < 0x5061644f7074696f) { /* branch "PadOptio" */
                        if (w == 0x4f6e65486f744f70) { /* descend "OneHotOp" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(61), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "tions" */
                                return unmatched;
                            } /* "tions" */
                        } else { /* descend "OneHotOp" */
                            if (w == 0x5061636b4f707469) { /* descend "PackOpti" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(59), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ons" */
                                    return unmatched;
                                } /* "ons" */
                            } else { /* descend "PackOpti" */
                                return unmatched;
                            } /* descend "PackOpti" */
                        } /* descend "OneHotOp" */
                    } else { /* branch "PadOptio" */
                        if (w < 0x50616456324f7074) { /* branch "PadV2Opt" */
                            if (w == 0x5061644f7074696f) { /* descend "PadOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(22), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "PadOptio" */
                                return unmatched;
                            } /* descend "PadOptio" */
                        } else { /* branch "PadV2Opt" */
                            if (w < 0x506f6f6c32444f70) { /* branch "Pool2DOp" */
                                if (w == 0x50616456324f7074) { /* descend "PadV2Opt" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(43), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ions" */
                                        return unmatched;
                                    } /* "ions" */
                                } else { /* descend "PadV2Opt" */
                                    return unmatched;
                                } /* descend "PadV2Opt" */
                            } else { /* branch "Pool2DOp" */
                                if (w == 0x506f6f6c32444f70) { /* descend "Pool2DOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(5), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "Pool2DOp" */
                                    if (w == 0x506f774f7074696f) { /* descend "PowOptio" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(56), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "ns" */
                                            return unmatched;
                                        } /* "ns" */
                                    } else { /* descend "PowOptio" */
                                        return unmatched;
                                    } /* descend "PowOptio" */
                                } /* descend "Pool2DOp" */
                            } /* branch "Pool2DOp" */
                        } /* branch "PadV2Opt" */
                    } /* branch "PadOptio" */
                } /* branch "OneHotOp" */
            } else { /* branch "Quantize" */
                if (w < 0x526573686170654f) { /* branch "ReshapeO" */
                    if (w < 0x52616e67654f7074) { /* branch "RangeOpt" */
                        if (w == 0x5175616e74697a65) { /* descend "Quantize" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(89), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "Options" */
                                return unmatched;
                            } /* "Options" */
                        } else { /* descend "Quantize" */
                            if (w == 0x524e4e4f7074696f) { /* descend "RNNOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(7), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "RNNOptio" */
                                return unmatched;
                            } /* descend "RNNOptio" */
                        } /* descend "Quantize" */
                    } else { /* branch "RangeOpt" */
                        if (w < 0x52616e6b4f707469) { /* branch "RankOpti" */
                            if (w == 0x52616e67654f7074) { /* descend "RangeOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(73), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "RangeOpt" */
                                return unmatched;
                            } /* descend "RangeOpt" */
                        } else { /* branch "RankOpti" */
                            if (w == 0x52616e6b4f707469) { /* descend "RankOpti" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(86), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ons" */
                                    return unmatched;
                                } /* "ons" */
                            } else { /* descend "RankOpti" */
                                if (w == 0x526564756365724f) { /* descend "ReducerO" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(27), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ptions" */
                                        return unmatched;
                                    } /* "ptions" */
                                } else { /* descend "ReducerO" */
                                    return unmatched;
                                } /* descend "ReducerO" */
                            } /* descend "RankOpti" */
                        } /* branch "RankOpti" */
                    } /* branch "RangeOpt" */
                } else { /* branch "ReshapeO" */
                    if (w < 0x5265766572736553) { /* branch "ReverseS" */
                        if (w < 0x526573697a654269) { /* branch "ResizeBi" */
                            if (w == 0x526573686170654f) { /* descend "ReshapeO" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(17), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ptions" */
                                    return unmatched;
                                } /* "ptions" */
                            } else { /* descend "ReshapeO" */
                                return unmatched;
                            } /* descend "ReshapeO" */
                        } else { /* branch "ResizeBi" */
                            if (w == 0x526573697a654269) { /* descend "ResizeBi" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x6c696e6561724f70) { /* descend "linearOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(15), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "linearOp" */
                                    return unmatched;
                                } /* descend "linearOp" */
                            } else { /* descend "ResizeBi" */
                                if (w == 0x526573697a654e65) { /* descend "ResizeNe" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x61726573744e6569) { /* descend "arestNei" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x6768626f724f7074) { /* descend "ghborOpt" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(74), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "ions" */
                                                return unmatched;
                                            } /* "ions" */
                                        } else { /* descend "ghborOpt" */
                                            return unmatched;
                                        } /* descend "ghborOpt" */
                                    } else { /* descend "arestNei" */
                                        return unmatched;
                                    } /* descend "arestNei" */
                                } else { /* descend "ResizeNe" */
                                    return unmatched;
                                } /* descend "ResizeNe" */
                            } /* descend "ResizeBi" */
                        } /* branch "ResizeBi" */
                    } else { /* branch "ReverseS" */
                        if (w < 0x5265766572736556) { /* branch "ReverseV" */
                            if (w == 0x5265766572736553) { /* descend "ReverseS" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x657175656e63654f) { /* descend "equenceO" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(87), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ptions" */
                                        return unmatched;
                                    } /* "ptions" */
                                } else { /* descend "equenceO" */
                                    return unmatched;
                                } /* descend "equenceO" */
                            } else { /* descend "ReverseS" */
                                return unmatched;
                            } /* descend "ReverseS" */
                        } else { /* branch "ReverseV" */
                            if (w < 0x535644464f707469) { /* branch "SVDFOpti" */
                                if (w == 0x5265766572736556) { /* descend "ReverseV" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x324f7074696f6e73) { /* "2Options" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(81), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "2Options" */
                                        return unmatched;
                                    } /* "2Options" */
                                } else { /* descend "ReverseV" */
                                    return unmatched;
                                } /* descend "ReverseV" */
                            } else { /* branch "SVDFOpti" */
                                if (w == 0x535644464f707469) { /* descend "SVDFOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(6), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "SVDFOpti" */
                                    if (w == 0x53656c6563744f70) { /* descend "SelectOp" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(47), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "tions" */
                                            return unmatched;
                                        } /* "tions" */
                                    } else { /* descend "SelectOp" */
                                        return unmatched;
                                    } /* descend "SelectOp" */
                                } /* descend "SVDFOpti" */
                            } /* branch "SVDFOpti" */
                        } /* branch "ReverseV" */
                    } /* branch "ReverseS" */
                } /* branch "ReshapeO" */
            } /* branch "Quantize" */
        } else { /* branch "Sequence" */
            if (w < 0x53717565657a654f) { /* branch "SqueezeO" */
                if (w < 0x5370616365546f42) { /* branch "SpaceToB" */
                    if (w < 0x536b69704772616d) { /* branch "SkipGram" */
                        if (w == 0x53657175656e6365) { /* descend "Sequence" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x524e4e4f7074696f) { /* descend "RNNOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(31), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "RNNOptio" */
                                return unmatched;
                            } /* descend "RNNOptio" */
                        } else { /* descend "Sequence" */
                            if (w == 0x53686170654f7074) { /* descend "ShapeOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(55), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "ShapeOpt" */
                                return unmatched;
                            } /* descend "ShapeOpt" */
                        } /* descend "Sequence" */
                    } else { /* branch "SkipGram" */
                        if (w < 0x536c6963654f7074) { /* branch "SliceOpt" */
                            if (w == 0x536b69704772616d) { /* descend "SkipGram" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffffffff00) == 0x4f7074696f6e7300) { /* "Options" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(18), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "Options" */
                                    return unmatched;
                                } /* "Options" */
                            } else { /* descend "SkipGram" */
                                return unmatched;
                            } /* descend "SkipGram" */
                        } else { /* branch "SliceOpt" */
                            if (w == 0x536c6963654f7074) { /* descend "SliceOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(48), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "SliceOpt" */
                                if (w == 0x536f66746d61784f) { /* descend "SoftmaxO" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(9), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ptions" */
                                        return unmatched;
                                    } /* "ptions" */
                                } else { /* descend "SoftmaxO" */
                                    return unmatched;
                                } /* descend "SoftmaxO" */
                            } /* descend "SliceOpt" */
                        } /* branch "SliceOpt" */
                    } /* branch "SkipGram" */
                } else { /* branch "SpaceToB" */
                    if (w < 0x53706c69744f7074) { /* branch "SplitOpt" */
                        if (w < 0x5370616365546f44) { /* branch "SpaceToD" */
                            if (w == 0x5370616365546f42) { /* descend "SpaceToB" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x617463684e444f70) { /* descend "atchNDOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(25), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "atchNDOp" */
                                    return unmatched;
                                } /* descend "atchNDOp" */
                            } else { /* descend "SpaceToB" */
                                return unmatched;
                            } /* descend "SpaceToB" */
                        } else { /* branch "SpaceToD" */
                            if (w == 0x5370616365546f44) { /* descend "SpaceToD" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x657074684f707469) { /* descend "epthOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(19), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "epthOpti" */
                                    return unmatched;
                                } /* descend "epthOpti" */
                            } else { /* descend "SpaceToD" */
                                if (w == 0x537061727365546f) { /* descend "SparseTo" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x44656e73654f7074) { /* descend "DenseOpt" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(50), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "ions" */
                                            return unmatched;
                                        } /* "ions" */
                                    } else { /* descend "DenseOpt" */
                                        return unmatched;
                                    } /* descend "DenseOpt" */
                                } else { /* descend "SparseTo" */
                                    return unmatched;
                                } /* descend "SparseTo" */
                            } /* descend "SpaceToD" */
                        } /* branch "SpaceToD" */
                    } else { /* branch "SplitOpt" */
                        if (w < 0x53706c6974564f70) { /* branch "SplitVOp" */
                            if (w == 0x53706c69744f7074) { /* descend "SplitOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(35), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "SplitOpt" */
                                return unmatched;
                            } /* descend "SplitOpt" */
                        } else { /* branch "SplitVOp" */
                            if (w < 0x5371756172654f70) { /* branch "SquareOp" */
                                if (w == 0x53706c6974564f70) { /* descend "SplitVOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(79), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "SplitVOp" */
                                    return unmatched;
                                } /* descend "SplitVOp" */
                            } else { /* branch "SquareOp" */
                                if (w == 0x5371756172654f70) { /* descend "SquareOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(66), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "SquareOp" */
                                    if (w == 0x5371756172656444) { /* descend "SquaredD" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x6966666572656e63) { /* descend "ifferenc" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if (w == 0x654f7074696f6e73) { /* "eOptions" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(76), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "eOptions" */
                                                return unmatched;
                                            } /* "eOptions" */
                                        } else { /* descend "ifferenc" */
                                            return unmatched;
                                        } /* descend "ifferenc" */
                                    } else { /* descend "SquaredD" */
                                        return unmatched;
                                    } /* descend "SquaredD" */
                                } /* descend "SquareOp" */
                            } /* branch "SquareOp" */
                        } /* branch "SplitVOp" */
                    } /* branch "SplitOpt" */
                } /* branch "SpaceToB" */
            } else { /* branch "SqueezeO" */
                if (w < 0x5472616e73706f73) { /* branch "Transpos" */
                    if (w < 0x5375624f7074696f) { /* branch "SubOptio" */
                        if (w == 0x53717565657a654f) { /* descend "SqueezeO" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                                if (buf != mark) {
                                    *value = UINT64_C(30), *value_sign = 0;
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ptions" */
                                return unmatched;
                            } /* "ptions" */
                        } else { /* descend "SqueezeO" */
                            if (w == 0x5374726964656453) { /* descend "StridedS" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x6c6963654f707469) { /* descend "liceOpti" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(32), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ons" */
                                        return unmatched;
                                    } /* "ons" */
                                } else { /* descend "liceOpti" */
                                    return unmatched;
                                } /* descend "liceOpti" */
                            } else { /* descend "StridedS" */
                                return unmatched;
                            } /* descend "StridedS" */
                        } /* descend "SqueezeO" */
                    } else { /* branch "SubOptio" */
                        if (w < 0x54696c654f707469) { /* branch "TileOpti" */
                            if (w == 0x5375624f7074696f) { /* descend "SubOptio" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(28), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ns" */
                                    return unmatched;
                                } /* "ns" */
                            } else { /* descend "SubOptio" */
                                return unmatched;
                            } /* descend "SubOptio" */
                        } else { /* branch "TileOpti" */
                            if (w == 0x54696c654f707469) { /* descend "TileOpti" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffff0000000000) == 0x6f6e730000000000) { /* "ons" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(51), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ons" */
                                    return unmatched;
                                } /* "ons" */
                            } else { /* descend "TileOpti" */
                                if (w == 0x546f704b56324f70) { /* descend "TopKV2Op" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(34), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "TopKV2Op" */
                                    return unmatched;
                                } /* descend "TopKV2Op" */
                            } /* descend "TileOpti" */
                        } /* branch "TileOpti" */
                    } /* branch "SubOptio" */
                } else { /* branch "Transpos" */
                    if (w < 0x556e697175654f70) { /* branch "UniqueOp" */
                        if (w == 0x5472616e73706f73) { /* descend "Transpos" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x65436f6e764f7074) { /* descend "eConvOpt" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(49), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ions" */
                                    return unmatched;
                                } /* "ions" */
                            } else { /* descend "eConvOpt" */
                                if (w == 0x654f7074696f6e73) { /* "eOptions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(26), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "eOptions" */
                                    return unmatched;
                                } /* "eOptions" */
                            } /* descend "eConvOpt" */
                        } else { /* descend "Transpos" */
                            if (w == 0x556e696469726563) { /* descend "Unidirec" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x74696f6e616c5365) { /* descend "tionalSe" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if (w == 0x7175656e63654c53) { /* descend "quenceLS" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x544d4f7074696f6e) { /* descend "TMOption" */
                                            buf += 8;
                                            w = flatcc_json_parser_symbol_part(buf, end);
                                            if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                                                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                                                if (buf != mark) {
                                                    *value = UINT64_C(71), *value_sign = 0;
                                                } else {
                                                    return unmatched;
                                                }
                                            } else { /* "s" */
                                                return unmatched;
                                            } /* "s" */
                                        } else { /* descend "TMOption" */
                                            return unmatched;
                                        } /* descend "TMOption" */
                                    } else { /* descend "quenceLS" */
                                        return unmatched;
                                    } /* descend "quenceLS" */
                                } else { /* descend "tionalSe" */
                                    return unmatched;
                                } /* descend "tionalSe" */
                            } else { /* descend "Unidirec" */
                                return unmatched;
                            } /* descend "Unidirec" */
                        } /* descend "Transpos" */
                    } else { /* branch "UniqueOp" */
                        if (w < 0x57686572654f7074) { /* branch "WhereOpt" */
                            if (w == 0x556e697175654f70) { /* descend "UniqueOp" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                    if (buf != mark) {
                                        *value = UINT64_C(80), *value_sign = 0;
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "tions" */
                                    return unmatched;
                                } /* "tions" */
                            } else { /* descend "UniqueOp" */
                                if (w == 0x556e7061636b4f70) { /* descend "UnpackOp" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(64), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "tions" */
                                        return unmatched;
                                    } /* "tions" */
                                } else { /* descend "UnpackOp" */
                                    return unmatched;
                                } /* descend "UnpackOp" */
                            } /* descend "UniqueOp" */
                        } else { /* branch "WhereOpt" */
                            if (w < 0x5768696c654f7074) { /* branch "WhileOpt" */
                                if (w == 0x57686572654f7074) { /* descend "WhereOpt" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(85), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ions" */
                                        return unmatched;
                                    } /* "ions" */
                                } else { /* descend "WhereOpt" */
                                    return unmatched;
                                } /* descend "WhereOpt" */
                            } else { /* branch "WhileOpt" */
                                if (w == 0x5768696c654f7074) { /* descend "WhileOpt" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffffffff00000000) == 0x696f6e7300000000) { /* "ions" */
                                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                                        if (buf != mark) {
                                            *value = UINT64_C(93), *value_sign = 0;
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "ions" */
                                        return unmatched;
                                    } /* "ions" */
                                } else { /* descend "WhileOpt" */
                                    if (w == 0x5a65726f734c696b) { /* descend "ZerosLik" */
                                        buf += 8;
                                        w = flatcc_json_parser_symbol_part(buf, end);
                                        if (w == 0x654f7074696f6e73) { /* "eOptions" */
                                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                                            if (buf != mark) {
                                                *value = UINT64_C(67), *value_sign = 0;
                                            } else {
                                                return unmatched;
                                            }
                                        } else { /* "eOptions" */
                                            return unmatched;
                                        } /* "eOptions" */
                                    } else { /* descend "ZerosLik" */
                                        return unmatched;
                                    } /* descend "ZerosLik" */
                                } /* descend "WhileOpt" */
                            } /* branch "WhileOpt" */
                        } /* branch "WhereOpt" */
                    } /* branch "UniqueOp" */
                } /* branch "Transpos" */
            } /* branch "SqueezeO" */
        } /* branch "Sequence" */
    } /* branch "MirrorPa" */
    return buf;
}

static const char *tflite_Padding_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffff000000) == 0x56414c4944000000) { /* "VALID" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "VALID" */
        if ((w & 0xffffffff00000000) == 0x53414d4500000000) { /* "SAME" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "SAME" */
            return unmatched;
        } /* "SAME" */
    } /* "VALID" */
    return buf;
}

static const char *tflite_ActivationFunctionType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x52454c5500000000) { /* branch "RELU" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } else { /* branch "RELU" */
        if (w < 0x52454c555f4e315f) { /* branch "RELU_N1_" */
            if ((w & 0xffffffffff000000) == 0x52454c5536000000) { /* "RELU6" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(3), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "RELU6" */
                if ((w & 0xffffffff00000000) == 0x52454c5500000000) { /* "RELU" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(1), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "RELU" */
                    return unmatched;
                } /* "RELU" */
            } /* "RELU6" */
        } else { /* branch "RELU_N1_" */
            if (w < 0x5349474e5f424954) { /* branch "SIGN_BIT" */
                if (w == 0x52454c555f4e315f) { /* descend "RELU_N1_" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x544f5f3100000000) { /* "TO_1" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(2), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "TO_1" */
                        return unmatched;
                    } /* "TO_1" */
                } else { /* descend "RELU_N1_" */
                    return unmatched;
                } /* descend "RELU_N1_" */
            } else { /* branch "SIGN_BIT" */
                if ((w & 0xffffffff00000000) == 0x54414e4800000000) { /* "TANH" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(4), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "TANH" */
                    if (w == 0x5349474e5f424954) { /* "SIGN_BIT" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(5), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "SIGN_BIT" */
                        return unmatched;
                    } /* "SIGN_BIT" */
                } /* "TANH" */
            } /* branch "SIGN_BIT" */
        } /* branch "RELU_N1_" */
    } /* branch "RELU" */
    return buf;
}

static const char *tflite_Conv2DOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 6)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66757365645f6163) { /* branch "fused_ac" */
            if (w == 0x64696c6174696f6e) { /* descend "dilation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f685f666163746f) { /* descend "_h_facto" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 1 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "r" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "r" */
                } else { /* descend "_h_facto" */
                    if (w == 0x5f775f666163746f) { /* descend "_w_facto" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 1 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "r" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "r" */
                    } else { /* descend "_w_facto" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "_w_facto" */
                } /* descend "_h_facto" */
            } else { /* descend "dilation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "dilation" */
        } else { /* branch "fused_ac" */
            if (w < 0x70616464696e6700) { /* branch "padding" */
                if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7469766174696f6e) { /* descend "tivation" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_ActivationFunctionType_parse_json_enum,
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "n" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "n" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "tivation" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "tivation" */
                } else { /* descend "fused_ac" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fused_ac" */
            } else { /* branch "padding" */
                if (w < 0x7374726964655f68) { /* branch "stride_h" */
                    if ((w & 0xffffffffffffff00) == 0x70616464696e6700) { /* "padding" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_Padding_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "padding" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "padding" */
                } else { /* branch "stride_h" */
                    if (w == 0x7374726964655f77) { /* "stride_w" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "stride_w" */
                        if (w == 0x7374726964655f68) { /* "stride_h" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "stride_h" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "stride_h" */
                    } /* "stride_w" */
                } /* branch "stride_h" */
            } /* branch "padding" */
        } /* branch "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Conv2DOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Conv2DOptions_parse_json_table);
}

static const char *tflite_Pool2DOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 6)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66757365645f6163) { /* branch "fused_ac" */
            if (w == 0x66696c7465725f68) { /* descend "filter_h" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x6569676874000000) { /* "eight" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "eight" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "eight" */
            } else { /* descend "filter_h" */
                if (w == 0x66696c7465725f77) { /* descend "filter_w" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x6964746800000000) { /* "idth" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "idth" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "idth" */
                } else { /* descend "filter_w" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "filter_w" */
            } /* descend "filter_h" */
        } else { /* branch "fused_ac" */
            if (w < 0x70616464696e6700) { /* branch "padding" */
                if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7469766174696f6e) { /* descend "tivation" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_ActivationFunctionType_parse_json_enum,
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "n" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "n" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "tivation" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "tivation" */
                } else { /* descend "fused_ac" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fused_ac" */
            } else { /* branch "padding" */
                if (w < 0x7374726964655f68) { /* branch "stride_h" */
                    if ((w & 0xffffffffffffff00) == 0x70616464696e6700) { /* "padding" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_Padding_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "padding" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "padding" */
                } else { /* branch "stride_h" */
                    if (w == 0x7374726964655f77) { /* "stride_w" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "stride_w" */
                        if (w == 0x7374726964655f68) { /* "stride_h" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "stride_h" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "stride_h" */
                    } /* "stride_w" */
                } /* branch "stride_h" */
            } /* branch "padding" */
        } /* branch "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Pool2DOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Pool2DOptions_parse_json_table);
}

static const char *tflite_DepthwiseConv2DOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 7)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66757365645f6163) { /* branch "fused_ac" */
            if (w < 0x64696c6174696f6e) { /* branch "dilation" */
                if (w == 0x64657074685f6d75) { /* descend "depth_mu" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6c7469706c696572) { /* "ltiplier" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ltiplier" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ltiplier" */
                } else { /* descend "depth_mu" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "depth_mu" */
            } else { /* branch "dilation" */
                if (w == 0x64696c6174696f6e) { /* descend "dilation" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x5f685f666163746f) { /* descend "_h_facto" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 1 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "r" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "r" */
                    } else { /* descend "_h_facto" */
                        if (w == 0x5f775f666163746f) { /* descend "_w_facto" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x7200000000000000) { /* "r" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 1 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 4, 4))) goto failed;
                                        flatbuffers_int32_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "r" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "r" */
                        } else { /* descend "_w_facto" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_w_facto" */
                    } /* descend "_h_facto" */
                } else { /* descend "dilation" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "dilation" */
            } /* branch "dilation" */
        } else { /* branch "fused_ac" */
            if (w < 0x70616464696e6700) { /* branch "padding" */
                if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7469766174696f6e) { /* descend "tivation" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_ActivationFunctionType_parse_json_enum,
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "n" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "n" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "tivation" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "tivation" */
                } else { /* descend "fused_ac" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fused_ac" */
            } else { /* branch "padding" */
                if (w < 0x7374726964655f68) { /* branch "stride_h" */
                    if ((w & 0xffffffffffffff00) == 0x70616464696e6700) { /* "padding" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_Padding_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "padding" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "padding" */
                } else { /* branch "stride_h" */
                    if (w == 0x7374726964655f77) { /* "stride_w" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "stride_w" */
                        if (w == 0x7374726964655f68) { /* "stride_h" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "stride_h" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "stride_h" */
                    } /* "stride_w" */
                } /* branch "stride_h" */
            } /* branch "padding" */
        } /* branch "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_DepthwiseConv2DOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_DepthwiseConv2DOptions_parse_json_table);
}

static const char *tflite_ConcatEmbeddingsOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e756d5f6368616e) { /* branch "num_chan" */
            if (w == 0x656d62656464696e) { /* descend "embeddin" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x675f64696d5f7065) { /* descend "g_dim_pe" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x725f6368616e6e65) { /* descend "r_channe" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6c00000000000000) { /* "l" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "l" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "l" */
                    } else { /* descend "r_channe" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "r_channe" */
                } else { /* descend "g_dim_pe" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "g_dim_pe" */
            } else { /* descend "embeddin" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "embeddin" */
        } else { /* branch "num_chan" */
            if (w == 0x6e756d5f6368616e) { /* descend "num_chan" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x6e656c7300000000) { /* "nels" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "nels" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "nels" */
            } else { /* descend "num_chan" */
                if (w == 0x6e756d5f636f6c75) { /* descend "num_colu" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6d6e735f7065725f) { /* descend "mns_per_" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffffff00) == 0x6368616e6e656c00) { /* "channel" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "channel" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "channel" */
                    } else { /* descend "mns_per_" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "mns_per_" */
                } else { /* descend "num_colu" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "num_colu" */
            } /* descend "num_chan" */
        } /* branch "num_chan" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ConcatEmbeddingsOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ConcatEmbeddingsOptions_parse_json_table);
}

static const char *tflite_LSHProjectionType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x5350415253450000) { /* branch "SPARSE" */
        if ((w & 0xffffffffff000000) == 0x44454e5345000000) { /* "DENSE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "DENSE" */
            return unmatched;
        } /* "DENSE" */
    } else { /* branch "SPARSE" */
        if ((w & 0xffffffffffffff00) == 0x554e4b4e4f574e00) { /* "UNKNOWN" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "UNKNOWN" */
            if ((w & 0xffffffffffff0000) == 0x5350415253450000) { /* "SPARSE" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "SPARSE" */
                return unmatched;
            } /* "SPARSE" */
        } /* "UNKNOWN" */
    } /* branch "SPARSE" */
    return buf;
}

static const char *tflite_LSHProjectionOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_LSHProjectionType_parse_json_enum,
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    flatbuffers_int8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "type" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LSHProjectionOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LSHProjectionOptions_parse_json_table);
}

static const char *tflite_SVDFOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            if ((w & 0xffffffff00000000) == 0x72616e6b00000000) { /* "rank" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "rank" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "rank" */
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SVDFOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SVDFOptions_parse_json_table);
}

static const char *tflite_RNNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_RNNOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_RNNOptions_parse_json_table);
}

static const char *tflite_SequenceRNNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            if (w == 0x74696d655f6d616a) { /* descend "time_maj" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x6f72000000000000) { /* "or" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                            flatbuffers_bool_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "or" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "or" */
            } else { /* descend "time_maj" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "time_maj" */
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SequenceRNNOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SequenceRNNOptions_parse_json_table);
}

static const char *tflite_BidirectionalSequenceRNNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d657267655f6f75) { /* branch "merge_ou" */
            if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x7469766174696f6e) { /* descend "tivation" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                int8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_ActivationFunctionType_parse_json_enum,
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                    flatbuffers_int8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "n" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "n" */
                    } else { /* descend "_functio" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "_functio" */
                } else { /* descend "tivation" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "tivation" */
            } else { /* descend "fused_ac" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "fused_ac" */
        } else { /* branch "merge_ou" */
            if (w == 0x6d657267655f6f75) { /* descend "merge_ou" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x7470757473000000) { /* "tputs" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                            flatbuffers_bool_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "tputs" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "tputs" */
            } else { /* descend "merge_ou" */
                if (w == 0x74696d655f6d616a) { /* descend "time_maj" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x6f72000000000000) { /* "or" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            uint8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_bool_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "or" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "or" */
                } else { /* descend "time_maj" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "time_maj" */
            } /* descend "merge_ou" */
        } /* branch "merge_ou" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_BidirectionalSequenceRNNOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_BidirectionalSequenceRNNOptions_parse_json_table);
}

static const char *tflite_FullyConnectedOptionsWeightsFormat_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffffffff00) == 0x44454641554c5400) { /* "DEFAULT" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "DEFAULT" */
        goto pfguard1;
    } /* "DEFAULT" */
    goto endpfguard1;
pfguard1:
    if (w == 0x53485546464c4544) { /* descend "SHUFFLED" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x34783136494e5438) { /* "4x16INT8" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "4x16INT8" */
            return unmatched;
        } /* "4x16INT8" */
    } else { /* descend "SHUFFLED" */
        return unmatched;
    } /* descend "SHUFFLED" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *tflite_FullyConnectedOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6b6565705f6e756d) { /* branch "keep_num" */
            if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x7469766174696f6e) { /* descend "tivation" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                int8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_ActivationFunctionType_parse_json_enum,
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                    flatbuffers_int8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "n" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "n" */
                    } else { /* descend "_functio" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "_functio" */
                } else { /* descend "tivation" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "tivation" */
            } else { /* descend "fused_ac" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "fused_ac" */
        } else { /* branch "keep_num" */
            if (w == 0x6b6565705f6e756d) { /* descend "keep_num" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x5f64696d73000000) { /* "_dims" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                            flatbuffers_bool_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "_dims" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "_dims" */
            } else { /* descend "keep_num" */
                if (w == 0x776569676874735f) { /* descend "weights_" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x666f726d61740000) { /* "format" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_FullyConnectedOptionsWeightsFormat_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "format" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "format" */
                } else { /* descend "weights_" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "weights_" */
            } /* descend "keep_num" */
        } /* branch "keep_num" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_FullyConnectedOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_FullyConnectedOptions_parse_json_table);
}

static const char *tflite_SoftmaxOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6265746100000000) { /* "beta" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                float val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_float_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "beta" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "beta" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SoftmaxOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SoftmaxOptions_parse_json_table);
}

static const char *tflite_ConcatenationOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6178697300000000) { /* "axis" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                int32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_int32_write_to_pe(pval, val);
                }
            } else {
                goto pfguard1;
            }
        } else { /* "axis" */
            goto pfguard1;
        } /* "axis" */
        goto endpfguard1;
pfguard1:
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
endpfguard1:
        (void)0;
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ConcatenationOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ConcatenationOptions_parse_json_table);
}

static const char *tflite_AddOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_AddOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_AddOptions_parse_json_table);
}

static const char *tflite_MulOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_MulOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_MulOptions_parse_json_table);
}

static const char *tflite_L2NormOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_L2NormOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_L2NormOptions_parse_json_table);
}

static const char *tflite_LocalResponseNormalizationOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6265746100000000) { /* branch "beta" */
            if ((w & 0xffffffffff000000) == 0x616c706861000000) { /* "alpha" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    float val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_float_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "alpha" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "alpha" */
        } else { /* branch "beta" */
            if (w < 0x6269617300000000) { /* branch "bias" */
                if ((w & 0xffffffff00000000) == 0x6265746100000000) { /* "beta" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "beta" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "beta" */
            } else { /* branch "bias" */
                if ((w & 0xffffffffffff0000) == 0x7261646975730000) { /* "radius" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "radius" */
                    if ((w & 0xffffffff00000000) == 0x6269617300000000) { /* "bias" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_float_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "bias" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "bias" */
                } /* "radius" */
            } /* branch "bias" */
        } /* branch "beta" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LocalResponseNormalizationOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LocalResponseNormalizationOptions_parse_json_table);
}

static const char *tflite_LSTMKernelType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x46554c4c00000000) { /* "FULL" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "FULL" */
        if ((w & 0xffffffffff000000) == 0x4241534943000000) { /* "BASIC" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "BASIC" */
            return unmatched;
        } /* "BASIC" */
    } /* "FULL" */
    return buf;
}

static const char *tflite_LSTMOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66757365645f6163) { /* branch "fused_ac" */
            if (w == 0x63656c6c5f636c69) { /* descend "cell_cli" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x7000000000000000) { /* "p" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "p" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "p" */
            } else { /* descend "cell_cli" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "cell_cli" */
        } else { /* branch "fused_ac" */
            if (w < 0x6b65726e656c5f74) { /* branch "kernel_t" */
                if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7469766174696f6e) { /* descend "tivation" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_ActivationFunctionType_parse_json_enum,
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "n" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "n" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "tivation" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "tivation" */
                } else { /* descend "fused_ac" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fused_ac" */
            } else { /* branch "kernel_t" */
                if (w == 0x6b65726e656c5f74) { /* descend "kernel_t" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_LSTMKernelType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ype" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ype" */
                } else { /* descend "kernel_t" */
                    if (w == 0x70726f6a5f636c69) { /* descend "proj_cli" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x7000000000000000) { /* "p" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                float val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                    flatbuffers_float_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "p" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "p" */
                    } else { /* descend "proj_cli" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "proj_cli" */
                } /* descend "kernel_t" */
            } /* branch "kernel_t" */
        } /* branch "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LSTMOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LSTMOptions_parse_json_table);
}

static const char *tflite_UnidirectionalSequenceLSTMOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66757365645f6163) { /* branch "fused_ac" */
            if (w == 0x63656c6c5f636c69) { /* descend "cell_cli" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x7000000000000000) { /* "p" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "p" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "p" */
            } else { /* descend "cell_cli" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "cell_cli" */
        } else { /* branch "fused_ac" */
            if (w < 0x70726f6a5f636c69) { /* branch "proj_cli" */
                if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7469766174696f6e) { /* descend "tivation" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_ActivationFunctionType_parse_json_enum,
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "n" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "n" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "tivation" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "tivation" */
                } else { /* descend "fused_ac" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fused_ac" */
            } else { /* branch "proj_cli" */
                if (w == 0x70726f6a5f636c69) { /* descend "proj_cli" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x7000000000000000) { /* "p" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                flatbuffers_float_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "p" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "p" */
                } else { /* descend "proj_cli" */
                    if (w == 0x74696d655f6d616a) { /* descend "time_maj" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6f72000000000000) { /* "or" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                                    flatbuffers_bool_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "or" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "or" */
                    } else { /* descend "time_maj" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "time_maj" */
                } /* descend "proj_cli" */
            } /* branch "proj_cli" */
        } /* branch "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_UnidirectionalSequenceLSTMOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_UnidirectionalSequenceLSTMOptions_parse_json_table);
}

static const char *tflite_BidirectionalSequenceLSTMOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d657267655f6f75) { /* branch "merge_ou" */
            if (w == 0x63656c6c5f636c69) { /* descend "cell_cli" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x7000000000000000) { /* "p" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "p" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "p" */
            } else { /* descend "cell_cli" */
                if (w == 0x66757365645f6163) { /* descend "fused_ac" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7469766174696f6e) { /* descend "tivation" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                                if (mark != buf) {
                                    int8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_ActivationFunctionType_parse_json_enum,
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                        flatbuffers_int8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "n" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "n" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "tivation" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "tivation" */
                } else { /* descend "fused_ac" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "fused_ac" */
            } /* descend "cell_cli" */
        } else { /* branch "merge_ou" */
            if (w < 0x70726f6a5f636c69) { /* branch "proj_cli" */
                if (w == 0x6d657267655f6f75) { /* descend "merge_ou" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x7470757473000000) { /* "tputs" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            uint8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                                flatbuffers_bool_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "tputs" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "tputs" */
                } else { /* descend "merge_ou" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "merge_ou" */
            } else { /* branch "proj_cli" */
                if (w == 0x70726f6a5f636c69) { /* descend "proj_cli" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x7000000000000000) { /* "p" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            float val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                flatbuffers_float_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "p" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "p" */
                } else { /* descend "proj_cli" */
                    if (w == 0x74696d655f6d616a) { /* descend "time_maj" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6f72000000000000) { /* "or" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 1 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 1, 1))) goto failed;
                                    flatbuffers_bool_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "or" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "or" */
                    } else { /* descend "time_maj" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "time_maj" */
                } /* descend "proj_cli" */
            } /* branch "proj_cli" */
        } /* branch "merge_ou" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_BidirectionalSequenceLSTMOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_BidirectionalSequenceLSTMOptions_parse_json_table);
}

static const char *tflite_ResizeBilinearOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x616c69676e5f636f) { /* descend "align_co" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x726e657273000000) { /* "rners" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                        flatbuffers_bool_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "rners" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "rners" */
        } else { /* descend "align_co" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "align_co" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ResizeBilinearOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ResizeBilinearOptions_parse_json_table);
}

static const char *tflite_ResizeNearestNeighborOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x616c69676e5f636f) { /* descend "align_co" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x726e657273000000) { /* "rners" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_bool_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "rners" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "rners" */
        } else { /* descend "align_co" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "align_co" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ResizeNearestNeighborOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ResizeNearestNeighborOptions_parse_json_table);
}

static const char *tflite_CallOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7375626772617068) { /* "subgraph" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                uint32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_uint32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "subgraph" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "subgraph" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_CallOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_CallOptions_parse_json_table);
}

static const char *tflite_PadOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_PadOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_PadOptions_parse_json_table);
}

static const char *tflite_PadV2Options_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_PadV2Options_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_PadV2Options_parse_json_table);
}

static const char *tflite_ReshapeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6e65775f73686170) { /* descend "new_shap" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_int32_write_to_pe(pval, val);
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "e" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "e" */
        } else { /* descend "new_shap" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "new_shap" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ReshapeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ReshapeOptions_parse_json_table);
}

static const char *tflite_SpaceToBatchNDOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SpaceToBatchNDOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SpaceToBatchNDOptions_parse_json_table);
}

static const char *tflite_BatchToSpaceNDOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_BatchToSpaceNDOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_BatchToSpaceNDOptions_parse_json_table);
}

static const char *tflite_SkipGramOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d61785f736b6970) { /* branch "max_skip" */
            if (w == 0x696e636c7564655f) { /* descend "include_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x616c6c5f6e677261) { /* descend "all_ngra" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x6d73000000000000) { /* "ms" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            uint8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 1, 1))) goto failed;
                                flatbuffers_bool_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ms" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ms" */
                } else { /* descend "all_ngra" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "all_ngra" */
            } else { /* descend "include_" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "include_" */
        } else { /* branch "max_skip" */
            if (w == 0x6d61785f736b6970) { /* descend "max_skip" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x5f73697a65000000) { /* "_size" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "_size" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "_size" */
            } else { /* descend "max_skip" */
                if (w == 0x6e6772616d5f7369) { /* descend "ngram_si" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x7a65000000000000) { /* "ze" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ze" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ze" */
                } else { /* descend "ngram_si" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "ngram_si" */
            } /* descend "max_skip" */
        } /* branch "max_skip" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SkipGramOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SkipGramOptions_parse_json_table);
}

static const char *tflite_SpaceToDepthOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x626c6f636b5f7369) { /* descend "block_si" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x7a65000000000000) { /* "ze" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ze" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ze" */
        } else { /* descend "block_si" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "block_si" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SpaceToDepthOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SpaceToDepthOptions_parse_json_table);
}

static const char *tflite_DepthToSpaceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x626c6f636b5f7369) { /* descend "block_si" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x7a65000000000000) { /* "ze" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ze" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ze" */
        } else { /* descend "block_si" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "block_si" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_DepthToSpaceOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_DepthToSpaceOptions_parse_json_table);
}

static const char *tflite_SubOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SubOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SubOptions_parse_json_table);
}

static const char *tflite_DivOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66757365645f6163) { /* descend "fused_ac" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x7469766174696f6e) { /* descend "tivation" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6e00000000000000) { /* "n" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_ActivationFunctionType_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                                flatbuffers_int8_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "n" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "n" */
                } else { /* descend "_functio" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "_functio" */
            } else { /* descend "tivation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tivation" */
        } else { /* descend "fused_ac" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "fused_ac" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_DivOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_DivOptions_parse_json_table);
}

static const char *tflite_TopKV2Options_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_TopKV2Options_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_TopKV2Options_parse_json_table);
}

static const char *tflite_CombinerType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x535152544e000000) { /* branch "SQRTN" */
        if ((w & 0xffffffff00000000) == 0x4d45414e00000000) { /* "MEAN" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "MEAN" */
            return unmatched;
        } /* "MEAN" */
    } else { /* branch "SQRTN" */
        if ((w & 0xffffff0000000000) == 0x53554d0000000000) { /* "SUM" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "SUM" */
            if ((w & 0xffffffffff000000) == 0x535152544e000000) { /* "SQRTN" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "SQRTN" */
                return unmatched;
            } /* "SQRTN" */
        } /* "SUM" */
    } /* branch "SQRTN" */
    return buf;
}

static const char *tflite_EmbeddingLookupSparseOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x636f6d62696e6572) { /* "combiner" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_CombinerType_parse_json_enum,
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    flatbuffers_int8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "combiner" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "combiner" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_EmbeddingLookupSparseOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_EmbeddingLookupSparseOptions_parse_json_table);
}

static const char *tflite_GatherOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6178697300000000) { /* "axis" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                int32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_int32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "axis" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "axis" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_GatherOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_GatherOptions_parse_json_table);
}

static const char *tflite_TransposeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_TransposeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_TransposeOptions_parse_json_table);
}

static const char *tflite_ExpOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ExpOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ExpOptions_parse_json_table);
}

static const char *tflite_CosOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_CosOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_CosOptions_parse_json_table);
}

static const char *tflite_ReducerOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6b6565705f64696d) { /* descend "keep_dim" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_bool_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "s" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "s" */
        } else { /* descend "keep_dim" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "keep_dim" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ReducerOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ReducerOptions_parse_json_table);
}

static const char *tflite_SqueezeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x73717565657a655f) { /* descend "squeeze_" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffff00000000) == 0x64696d7300000000) { /* "dims" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_int32_write_to_pe(pval, val);
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "dims" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "dims" */
        } else { /* descend "squeeze_" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "squeeze_" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SqueezeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SqueezeOptions_parse_json_table);
}

static const char *tflite_SplitOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6e756d5f73706c69) { /* descend "num_spli" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x7473000000000000) { /* "ts" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ts" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ts" */
        } else { /* descend "num_spli" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "num_spli" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SplitOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SplitOptions_parse_json_table);
}

static const char *tflite_SplitVOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6e756d5f73706c69) { /* descend "num_spli" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x7473000000000000) { /* "ts" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ts" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ts" */
        } else { /* descend "num_spli" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "num_spli" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SplitVOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SplitVOptions_parse_json_table);
}

static const char *tflite_StridedSliceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x656e645f6d61736b) { /* branch "end_mask" */
            if (w == 0x626567696e5f6d61) { /* descend "begin_ma" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x736b000000000000) { /* "sk" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "sk" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "sk" */
            } else { /* descend "begin_ma" */
                if (w == 0x656c6c6970736973) { /* descend "ellipsis" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x5f6d61736b000000) { /* "_mask" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "_mask" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "_mask" */
                } else { /* descend "ellipsis" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "ellipsis" */
            } /* descend "begin_ma" */
        } else { /* branch "end_mask" */
            if (w < 0x6e65775f61786973) { /* branch "new_axis" */
                if (w == 0x656e645f6d61736b) { /* "end_mask" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "end_mask" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "end_mask" */
            } else { /* branch "new_axis" */
                if (w == 0x6e65775f61786973) { /* descend "new_axis" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x5f6d61736b000000) { /* "_mask" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "_mask" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "_mask" */
                } else { /* descend "new_axis" */
                    if (w == 0x736872696e6b5f61) { /* descend "shrink_a" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x7869735f6d61736b) { /* "xis_mask" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "xis_mask" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "xis_mask" */
                    } else { /* descend "shrink_a" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "shrink_a" */
                } /* descend "new_axis" */
            } /* branch "new_axis" */
        } /* branch "end_mask" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_StridedSliceOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_StridedSliceOptions_parse_json_table);
}

static const char *tflite_LogSoftmaxOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LogSoftmaxOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LogSoftmaxOptions_parse_json_table);
}

static const char *tflite_CastOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x696e5f646174615f) { /* descend "in_data_" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_TensorType_parse_json_enum,
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_int8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "type" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "type" */
        } else { /* descend "in_data_" */
            if (w == 0x6f75745f64617461) { /* descend "out_data" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x5f74797065000000) { /* "_type" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        int8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_TensorType_parse_json_enum,
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 1, 1))) goto failed;
                            flatbuffers_int8_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "_type" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "_type" */
            } else { /* descend "out_data" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "out_data" */
        } /* descend "in_data_" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_CastOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_CastOptions_parse_json_table);
}

static const char *tflite_DequantizeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_DequantizeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_DequantizeOptions_parse_json_table);
}

static const char *tflite_MaximumMinimumOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_MaximumMinimumOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_MaximumMinimumOptions_parse_json_table);
}

static const char *tflite_TileOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_TileOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_TileOptions_parse_json_table);
}

static const char *tflite_ArgMaxOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6f75747075745f74) { /* descend "output_t" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_TensorType_parse_json_enum,
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_int8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ype" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ype" */
        } else { /* descend "output_t" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "output_t" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ArgMaxOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ArgMaxOptions_parse_json_table);
}

static const char *tflite_ArgMinOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6f75747075745f74) { /* descend "output_t" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_TensorType_parse_json_enum,
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_int8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ype" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ype" */
        } else { /* descend "output_t" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "output_t" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ArgMinOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ArgMinOptions_parse_json_table);
}

static const char *tflite_GreaterOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_GreaterOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_GreaterOptions_parse_json_table);
}

static const char *tflite_GreaterEqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_GreaterEqualOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_GreaterEqualOptions_parse_json_table);
}

static const char *tflite_LessOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LessOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LessOptions_parse_json_table);
}

static const char *tflite_LessEqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LessEqualOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LessEqualOptions_parse_json_table);
}

static const char *tflite_NegOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_NegOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_NegOptions_parse_json_table);
}

static const char *tflite_SelectOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SelectOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SelectOptions_parse_json_table);
}

static const char *tflite_SliceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SliceOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SliceOptions_parse_json_table);
}

static const char *tflite_TransposeConvOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x7374726964655f68) { /* branch "stride_h" */
            if ((w & 0xffffffffffffff00) == 0x70616464696e6700) { /* "padding" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_Padding_parse_json_enum,
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_int8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "padding" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "padding" */
        } else { /* branch "stride_h" */
            if (w == 0x7374726964655f77) { /* "stride_w" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "stride_w" */
                if (w == 0x7374726964655f68) { /* "stride_h" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "stride_h" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "stride_h" */
            } /* "stride_w" */
        } /* branch "stride_h" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_TransposeConvOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_TransposeConvOptions_parse_json_table);
}

static const char *tflite_ExpandDimsOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ExpandDimsOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ExpandDimsOptions_parse_json_table);
}

static const char *tflite_SparseToDenseOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x76616c6964617465) { /* descend "validate" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x5f696e6469636573) { /* "_indices" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_bool_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "_indices" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "_indices" */
        } else { /* descend "validate" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "validate" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SparseToDenseOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SparseToDenseOptions_parse_json_table);
}

static const char *tflite_EqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_EqualOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_EqualOptions_parse_json_table);
}

static const char *tflite_NotEqualOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_NotEqualOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_NotEqualOptions_parse_json_table);
}

static const char *tflite_ShapeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6f75745f74797065) { /* "out_type" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_TensorType_parse_json_enum,
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    flatbuffers_int8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "out_type" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "out_type" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ShapeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ShapeOptions_parse_json_table);
}

static const char *tflite_RankOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_RankOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_RankOptions_parse_json_table);
}

static const char *tflite_PowOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_PowOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_PowOptions_parse_json_table);
}

static const char *tflite_FakeQuantOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d696e0000000000) { /* branch "min" */
            if ((w & 0xffffff0000000000) == 0x6d61780000000000) { /* "max" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    float val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_float_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "max" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "max" */
        } else { /* branch "min" */
            if (w < 0x6e6172726f775f72) { /* branch "narrow_r" */
                if ((w & 0xffffff0000000000) == 0x6d696e0000000000) { /* "min" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "min" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "min" */
            } else { /* branch "narrow_r" */
                if (w == 0x6e6172726f775f72) { /* descend "narrow_r" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x616e676500000000) { /* "ange" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            uint8_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                                flatbuffers_bool_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ange" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ange" */
                } else { /* descend "narrow_r" */
                    if (w == 0x6e756d5f62697473) { /* "num_bits" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "num_bits" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "num_bits" */
                } /* descend "narrow_r" */
            } /* branch "narrow_r" */
        } /* branch "min" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_FakeQuantOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_FakeQuantOptions_parse_json_table);
}

static const char *tflite_PackOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6178697300000000) { /* "axis" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                int32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                    flatbuffers_int32_write_to_pe(pval, val);
                }
            } else {
                goto pfguard1;
            }
        } else { /* "axis" */
            goto pfguard1;
        } /* "axis" */
        goto endpfguard1;
pfguard1:
        if (w == 0x76616c7565735f63) { /* descend "values_c" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffff00000000) == 0x6f756e7400000000) { /* "ount" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "ount" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "ount" */
        } else { /* descend "values_c" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "values_c" */
endpfguard1:
        (void)0;
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_PackOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_PackOptions_parse_json_table);
}

static const char *tflite_LogicalOrOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LogicalOrOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LogicalOrOptions_parse_json_table);
}

static const char *tflite_OneHotOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6178697300000000) { /* "axis" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                int32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_int32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "axis" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "axis" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_OneHotOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_OneHotOptions_parse_json_table);
}

static const char *tflite_AbsOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_AbsOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_AbsOptions_parse_json_table);
}

static const char *tflite_HardSwishOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_HardSwishOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_HardSwishOptions_parse_json_table);
}

static const char *tflite_LogicalAndOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LogicalAndOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LogicalAndOptions_parse_json_table);
}

static const char *tflite_LogicalNotOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LogicalNotOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LogicalNotOptions_parse_json_table);
}

static const char *tflite_UnpackOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x6e756d0000000000) { /* "num" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
            if (mark != buf) {
                int32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_int32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "num" */
            if ((w & 0xffffffff00000000) == 0x6178697300000000) { /* "axis" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "axis" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "axis" */
        } /* "num" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_UnpackOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_UnpackOptions_parse_json_table);
}

static const char *tflite_FloorDivOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_FloorDivOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_FloorDivOptions_parse_json_table);
}

static const char *tflite_SquareOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SquareOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SquareOptions_parse_json_table);
}

static const char *tflite_ZerosLikeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ZerosLikeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ZerosLikeOptions_parse_json_table);
}

static const char *tflite_FillOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_FillOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_FillOptions_parse_json_table);
}

static const char *tflite_FloorModOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_FloorModOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_FloorModOptions_parse_json_table);
}

static const char *tflite_RangeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_RangeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_RangeOptions_parse_json_table);
}

static const char *tflite_LeakyReluOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x616c706861000000) { /* "alpha" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                float val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0.000000 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                    flatbuffers_float_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "alpha" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "alpha" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_LeakyReluOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_LeakyReluOptions_parse_json_table);
}

static const char *tflite_SquaredDifferenceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SquaredDifferenceOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SquaredDifferenceOptions_parse_json_table);
}

static const char *tflite_MirrorPadMode_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffffffffff00) == 0x5245464c45435400) { /* "REFLECT" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "REFLECT" */
        goto pfguard1;
    } /* "REFLECT" */
    goto endpfguard1;
pfguard1:
    if (w == 0x53594d4d45545249) { /* descend "SYMMETRI" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xff00000000000000) == 0x4300000000000000) { /* "C" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "C" */
            return unmatched;
        } /* "C" */
    } else { /* descend "SYMMETRI" */
        return unmatched;
    } /* descend "SYMMETRI" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *tflite_MirrorPadOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6d6f646500000000) { /* "mode" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                int8_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        tflite_MirrorPadMode_parse_json_enum,
                        tflite_v3_local_tflite_json_parser_enum,
                        tflite_v3_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                    flatbuffers_int8_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "mode" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "mode" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_MirrorPadOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_MirrorPadOptions_parse_json_table);
}

static const char *tflite_UniqueOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6964785f6f75745f) { /* descend "idx_out_" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    int8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_TensorType_parse_json_enum,
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 2 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                        flatbuffers_int8_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "type" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "type" */
        } else { /* descend "idx_out_" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "idx_out_" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_UniqueOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_UniqueOptions_parse_json_table);
}

static const char *tflite_ReverseV2Options_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ReverseV2Options_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ReverseV2Options_parse_json_table);
}

static const char *tflite_AddNOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_AddNOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_AddNOptions_parse_json_table);
}

static const char *tflite_GatherNdOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_GatherNdOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_GatherNdOptions_parse_json_table);
}

static const char *tflite_WhereOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_WhereOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_WhereOptions_parse_json_table);
}

static const char *tflite_ReverseSequenceOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x62617463685f6469) { /* descend "batch_di" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6d00000000000000) { /* "m" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "m" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "m" */
        } else { /* descend "batch_di" */
            if ((w & 0xffffffffffffff00) == 0x7365715f64696d00) { /* "seq_dim" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "seq_dim" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "seq_dim" */
        } /* descend "batch_di" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_ReverseSequenceOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_ReverseSequenceOptions_parse_json_table);
}

static const char *tflite_MatrixDiagOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_MatrixDiagOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_MatrixDiagOptions_parse_json_table);
}

static const char *tflite_QuantizeOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_QuantizeOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_QuantizeOptions_parse_json_table);
}

static const char *tflite_MatrixSetDiagOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_MatrixSetDiagOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_MatrixSetDiagOptions_parse_json_table);
}

static const char *tflite_IfOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x656c73655f737562) { /* descend "else_sub" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x67726170685f696e) { /* descend "graph_in" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x6465780000000000) { /* "dex" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "dex" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "dex" */
            } else { /* descend "graph_in" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "graph_in" */
        } else { /* descend "else_sub" */
            if (w == 0x7468656e5f737562) { /* descend "then_sub" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x67726170685f696e) { /* descend "graph_in" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x6465780000000000) { /* "dex" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "dex" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "dex" */
                } else { /* descend "graph_in" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "graph_in" */
            } else { /* descend "then_sub" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "then_sub" */
        } /* descend "else_sub" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_IfOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_IfOptions_parse_json_table);
}

static const char *tflite_WhileOptions_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x626f64795f737562) { /* descend "body_sub" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x67726170685f696e) { /* descend "graph_in" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x6465780000000000) { /* "dex" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "dex" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "dex" */
            } else { /* descend "graph_in" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "graph_in" */
        } else { /* descend "body_sub" */
            if (w == 0x636f6e645f737562) { /* descend "cond_sub" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x67726170685f696e) { /* descend "graph_in" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x6465780000000000) { /* "dex" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "dex" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "dex" */
                } else { /* descend "graph_in" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "graph_in" */
            } else { /* descend "cond_sub" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "cond_sub" */
        } /* descend "body_sub" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_WhileOptions_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_WhileOptions_parse_json_table);
}

static const char *tflite_OperatorCode_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x637573746f6d5f63) { /* branch "custom_c" */
            if (w == 0x6275696c74696e5f) { /* descend "builtin_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x636f646500000000) { /* "code" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        int8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_BuiltinOperator_parse_json_enum,
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 1, 1))) goto failed;
                            flatbuffers_int8_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "code" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "code" */
            } else { /* descend "builtin_" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "builtin_" */
        } else { /* branch "custom_c" */
            if (w == 0x637573746f6d5f63) { /* descend "custom_c" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x6f64650000000000) { /* "ode" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ode" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ode" */
            } else { /* descend "custom_c" */
                if ((w & 0xffffffffffffff00) == 0x76657273696f6e00) { /* "version" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                tflite_v3_local_tflite_json_parser_enum,
                                tflite_v3_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 1 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "version" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "version" */
            } /* descend "custom_c" */
        } /* branch "custom_c" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_OperatorCode_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_OperatorCode_parse_json_table);
}

static const char *tflite_CustomOptionsFormat_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x464c455842554646) { /* descend "FLEXBUFF" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffff0000000000) == 0x4552530000000000) { /* "ERS" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "ERS" */
            return unmatched;
        } /* "ERS" */
    } else { /* descend "FLEXBUFF" */
        return unmatched;
    } /* descend "FLEXBUFF" */
    return buf;
}

static const char *tflite_Operator_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 9)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x696e707574730000) { /* branch "inputs" */
            if (w == 0x6275696c74696e5f) { /* descend "builtin_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6f7074696f6e735f) { /* descend "options_" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_BuiltinOptions_parse_json_enum,
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 4, h_unions, symbolic_parsers, tflite_BuiltinOptions_parse_json_union);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "type" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "type" */
                } else { /* descend "options_" */
                    if ((w & 0xffffffffffffff00) == 0x6f7074696f6e7300) { /* "options" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            buf = flatcc_json_parser_union(ctx, buf, end, 0, 4, h_unions, tflite_BuiltinOptions_parse_json_union);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "options" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "options" */
                } /* descend "options_" */
            } else { /* descend "builtin_" */
                if (w == 0x637573746f6d5f6f) { /* descend "custom_o" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x7074696f6e735f66) { /* descend "ptions_f" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffff000000) == 0x6f726d6174000000) { /* "ormat" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                            if (mark != buf) {
                                int8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_CustomOptionsFormat_parse_json_enum,
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 1, 1))) goto failed;
                                    flatbuffers_int8_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ormat" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ormat" */
                    } else { /* descend "ptions_f" */
                        if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_uint8_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 5))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ptions" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ptions" */
                    } /* descend "ptions_f" */
                } else { /* descend "custom_o" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "custom_o" */
            } /* descend "builtin_" */
        } else { /* branch "inputs" */
            if (w < 0x6d75746174696e67) { /* branch "mutating" */
                if ((w & 0xffffffffffff0000) == 0x696e707574730000) { /* "inputs" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_int32_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        goto pfguard1;
                    }
                } else { /* "inputs" */
                    goto pfguard1;
                } /* "inputs" */
                goto endpfguard1;
pfguard1:
                if (w == 0x696e7465726d6564) { /* descend "intermed" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x6961746573000000) { /* "iates" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_int32_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 8))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "iates" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "iates" */
                } else { /* descend "intermed" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "intermed" */
endpfguard1:
                (void)0;
            } else { /* branch "mutating" */
                if (w < 0x6f70636f64655f69) { /* branch "opcode_i" */
                    if (w == 0x6d75746174696e67) { /* descend "mutating" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f7661726961626c) { /* descend "_variabl" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x655f696e70757473) { /* "e_inputs" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                                if (mark != buf) {
                                    if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        uint8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                tflite_v3_local_tflite_json_parser_enum,
                                                tflite_v3_global_json_parser_enum, 0 };
                                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                        buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        flatbuffers_bool_write_to_pe(pval, val);
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 7))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "e_inputs" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "e_inputs" */
                        } else { /* descend "_variabl" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_variabl" */
                    } else { /* descend "mutating" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "mutating" */
                } else { /* branch "opcode_i" */
                    if (w == 0x6f70636f64655f69) { /* descend "opcode_i" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffff00000000) == 0x6e64657800000000) { /* "ndex" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ndex" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ndex" */
                    } else { /* descend "opcode_i" */
                        if ((w & 0xffffffffffffff00) == 0x6f75747075747300) { /* "outputs" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "outputs" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "outputs" */
                    } /* descend "opcode_i" */
                } /* branch "opcode_i" */
            } /* branch "mutating" */
        } /* branch "inputs" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Operator_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Operator_parse_json_table);
}

static const char *tflite_SubGraph_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6f70657261746f72) { /* branch "operator" */
            if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "name" */
                if ((w & 0xffffffffffff0000) == 0x696e707574730000) { /* "inputs" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    tflite_v3_local_tflite_json_parser_enum,
                                    tflite_v3_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_int32_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "inputs" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "inputs" */
            } /* "name" */
        } else { /* branch "operator" */
            if (w < 0x6f75747075747300) { /* branch "outputs" */
                if (w == 0x6f70657261746f72) { /* descend "operator" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                buf = tflite_Operator_parse_json_table(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_offset_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "s" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "s" */
                } else { /* descend "operator" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "operator" */
            } else { /* branch "outputs" */
                if ((w & 0xffffffffffffff00) == 0x74656e736f727300) { /* "tensors" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = tflite_Tensor_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "tensors" */
                    if ((w & 0xffffffffffffff00) == 0x6f75747075747300) { /* "outputs" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_int32_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "outputs" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "outputs" */
                } /* "tensors" */
            } /* branch "outputs" */
        } /* branch "operator" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_SubGraph_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_SubGraph_parse_json_table);
}

static const char *tflite_Buffer_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6461746100000000) { /* "data" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    uint8_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_uint8_write_to_pe(pval, val);
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "data" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* "data" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Buffer_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Buffer_parse_json_table);
}

static const char *tflite_Metadata_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
            if (mark != buf) {
                buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "name" */
            if ((w & 0xffffffffffff0000) == 0x6275666665720000) { /* "buffer" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            tflite_v3_local_tflite_json_parser_enum,
                            tflite_v3_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "buffer" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "buffer" */
        } /* "name" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Metadata_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Metadata_parse_json_table);
}

static const char *tflite_Model_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 7)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d65746164617461) { /* branch "metadata" */
            if ((w & 0xffffffffffffff00) == 0x6275666665727300) { /* "buffers" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        buf = tflite_Buffer_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                    *pref = ref;
                } else {
                    goto pfguard1;
                }
            } else { /* "buffers" */
                goto pfguard1;
            } /* "buffers" */
            goto endpfguard1;
pfguard1:
            if (w == 0x6465736372697074) { /* descend "descript" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x696f6e0000000000) { /* "ion" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ion" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ion" */
            } else { /* descend "descript" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "descript" */
endpfguard1:
            (void)0;
        } else { /* branch "metadata" */
            if (w < 0x6f70657261746f72) { /* branch "operator" */
                if (w == 0x6d65746164617461) { /* descend "metadata" */
                    /* descend prefix key "metadata" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = tflite_Metadata_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 6))) goto failed;
                        *pref = ref;
                    } else {
                        /* descend suffix "metadata" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffffff00) == 0x5f62756666657200) { /* "_buffer" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            tflite_v3_local_tflite_json_parser_enum,
                                            tflite_v3_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 5))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "_buffer" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "_buffer" */
                    } /* desend suffix "metadata" */
                } else { /* descend "metadata" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "metadata" */
            } else { /* branch "operator" */
                if (w < 0x7375626772617068) { /* branch "subgraph" */
                    if (w == 0x6f70657261746f72) { /* descend "operator" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffff0000) == 0x5f636f6465730000) { /* "_codes" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    buf = tflite_OperatorCode_parse_json_table(ctx, buf, end, &ref);
                                    if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                    *pref = ref;
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "_codes" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "_codes" */
                    } else { /* descend "operator" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "operator" */
                } else { /* branch "subgraph" */
                    if (w == 0x7375626772617068) { /* descend "subgraph" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    buf = tflite_SubGraph_parse_json_table(ctx, buf, end, &ref);
                                    if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                    *pref = ref;
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "s" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "s" */
                    } else { /* descend "subgraph" */
                        if ((w & 0xffffffffffffff00) == 0x76657273696f6e00) { /* "version" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        tflite_v3_local_tflite_json_parser_enum,
                                        tflite_v3_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != 0 || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "version" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "version" */
                    } /* descend "subgraph" */
                } /* branch "subgraph" */
            } /* branch "operator" */
        } /* branch "metadata" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int tflite_Model_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, int flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, tflite_Model_parse_json_table);
}

static const char *tflite_v3_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *tflite_v3_local_tflite_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x46756c6c79436f6e) { /* branch "FullyCon" */
        if (w < 0x4275696c74696e4f) { /* branch "BuiltinO" */
            if (w == 0x4163746976617469) { /* descend "Activati" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x6f6e46756e637469) { /* descend "onFuncti" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x6f6e547970650000) { /* "onType" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                        if (buf != mark) {
                            buf = tflite_ActivationFunctionType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "onType" */
                        return unmatched;
                    } /* "onType" */
                } else { /* descend "onFuncti" */
                    return unmatched;
                } /* descend "onFuncti" */
            } else { /* descend "Activati" */
                return unmatched;
            } /* descend "Activati" */
        } else { /* branch "BuiltinO" */
            if (w == 0x4275696c74696e4f) { /* descend "BuiltinO" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffff0000) == 0x7074696f6e730000) { /* "ptions" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                    if (buf != mark) {
                        buf = tflite_BuiltinOptions_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "ptions" */
                    if ((w & 0xffffffffffffff00) == 0x70657261746f7200) { /* "perator" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                        if (buf != mark) {
                            buf = tflite_BuiltinOperator_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "perator" */
                        return unmatched;
                    } /* "perator" */
                } /* "ptions" */
            } else { /* descend "BuiltinO" */
                if (w == 0x436f6d62696e6572) { /* descend "Combiner" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x5479706500000000) { /* "Type" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                        if (buf != mark) {
                            buf = tflite_CombinerType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "Type" */
                        return unmatched;
                    } /* "Type" */
                } else { /* descend "Combiner" */
                    if (w == 0x437573746f6d4f70) { /* descend "CustomOp" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x74696f6e73466f72) { /* descend "tionsFor" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffff0000000000) == 0x6d61740000000000) { /* "mat" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                                if (buf != mark) {
                                    buf = tflite_CustomOptionsFormat_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "mat" */
                                return unmatched;
                            } /* "mat" */
                        } else { /* descend "tionsFor" */
                            return unmatched;
                        } /* descend "tionsFor" */
                    } else { /* descend "CustomOp" */
                        return unmatched;
                    } /* descend "CustomOp" */
                } /* descend "Combiner" */
            } /* descend "BuiltinO" */
        } /* branch "BuiltinO" */
    } else { /* branch "FullyCon" */
        if (w < 0x4d6972726f725061) { /* branch "MirrorPa" */
            if (w < 0x4c534850726f6a65) { /* branch "LSHProje" */
                if (w == 0x46756c6c79436f6e) { /* descend "FullyCon" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6e65637465644f70) { /* descend "nectedOp" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x74696f6e73576569) { /* descend "tionsWei" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x67687473466f726d) { /* descend "ghtsForm" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6174000000000000) { /* "at" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                                    if (buf != mark) {
                                        buf = tflite_FullyConnectedOptionsWeightsFormat_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "at" */
                                    return unmatched;
                                } /* "at" */
                            } else { /* descend "ghtsForm" */
                                return unmatched;
                            } /* descend "ghtsForm" */
                        } else { /* descend "tionsWei" */
                            return unmatched;
                        } /* descend "tionsWei" */
                    } else { /* descend "nectedOp" */
                        return unmatched;
                    } /* descend "nectedOp" */
                } else { /* descend "FullyCon" */
                    return unmatched;
                } /* descend "FullyCon" */
            } else { /* branch "LSHProje" */
                if (w == 0x4c534850726f6a65) { /* descend "LSHProje" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6374696f6e547970) { /* descend "ctionTyp" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                            if (buf != mark) {
                                buf = tflite_LSHProjectionType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "e" */
                            return unmatched;
                        } /* "e" */
                    } else { /* descend "ctionTyp" */
                        return unmatched;
                    } /* descend "ctionTyp" */
                } else { /* descend "LSHProje" */
                    if (w == 0x4c53544d4b65726e) { /* descend "LSTMKern" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffff0000) == 0x656c547970650000) { /* "elType" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                            if (buf != mark) {
                                buf = tflite_LSTMKernelType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "elType" */
                            return unmatched;
                        } /* "elType" */
                    } else { /* descend "LSTMKern" */
                        return unmatched;
                    } /* descend "LSTMKern" */
                } /* descend "LSHProje" */
            } /* branch "LSHProje" */
        } else { /* branch "MirrorPa" */
            if (w < 0x50616464696e6700) { /* branch "Padding" */
                if (w == 0x4d6972726f725061) { /* descend "MirrorPa" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x644d6f6465000000) { /* "dMode" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = tflite_MirrorPadMode_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "dMode" */
                        return unmatched;
                    } /* "dMode" */
                } else { /* descend "MirrorPa" */
                    return unmatched;
                } /* descend "MirrorPa" */
            } else { /* branch "Padding" */
                if (w < 0x5175616e74697a61) { /* branch "Quantiza" */
                    if ((w & 0xffffffffffffff00) == 0x50616464696e6700) { /* "Padding" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                        if (buf != mark) {
                            buf = tflite_Padding_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "Padding" */
                        return unmatched;
                    } /* "Padding" */
                } else { /* branch "Quantiza" */
                    if (w == 0x5175616e74697a61) { /* descend "Quantiza" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x74696f6e44657461) { /* descend "tionDeta" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffff0000000000) == 0x696c730000000000) { /* "ils" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                                if (buf != mark) {
                                    buf = tflite_QuantizationDetails_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "ils" */
                                return unmatched;
                            } /* "ils" */
                        } else { /* descend "tionDeta" */
                            return unmatched;
                        } /* descend "tionDeta" */
                    } else { /* descend "Quantiza" */
                        if (w == 0x54656e736f725479) { /* descend "TensorTy" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x7065000000000000) { /* "pe" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                                if (buf != mark) {
                                    buf = tflite_TensorType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "pe" */
                                return unmatched;
                            } /* "pe" */
                        } else { /* descend "TensorTy" */
                            return unmatched;
                        } /* descend "TensorTy" */
                    } /* descend "Quantiza" */
                } /* branch "Quantiza" */
            } /* branch "Padding" */
        } /* branch "MirrorPa" */
    } /* branch "FullyCon" */
    return buf;
}

static const char *tflite_v3_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x74666c6974652e46) { /* branch "tflite.F" */
        if (w < 0x74666c6974652e42) { /* branch "tflite.B" */
            if (w == 0x74666c6974652e41) { /* descend "tflite.A" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x637469766174696f) { /* descend "ctivatio" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6e46756e6374696f) { /* descend "nFunctio" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffff000000) == 0x6e54797065000000) { /* "nType" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                            if (buf != mark) {
                                buf = tflite_ActivationFunctionType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "nType" */
                            return unmatched;
                        } /* "nType" */
                    } else { /* descend "nFunctio" */
                        return unmatched;
                    } /* descend "nFunctio" */
                } else { /* descend "ctivatio" */
                    return unmatched;
                } /* descend "ctivatio" */
            } else { /* descend "tflite.A" */
                return unmatched;
            } /* descend "tflite.A" */
        } else { /* branch "tflite.B" */
            if (w == 0x74666c6974652e42) { /* descend "tflite.B" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x75696c74696e4f70) { /* descend "uiltinOp" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x74696f6e73000000) { /* "tions" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                        if (buf != mark) {
                            buf = tflite_BuiltinOptions_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "tions" */
                        if ((w & 0xffffffffffff0000) == 0x657261746f720000) { /* "erator" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                            if (buf != mark) {
                                buf = tflite_BuiltinOperator_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "erator" */
                            return unmatched;
                        } /* "erator" */
                    } /* "tions" */
                } else { /* descend "uiltinOp" */
                    return unmatched;
                } /* descend "uiltinOp" */
            } else { /* descend "tflite.B" */
                if (w == 0x74666c6974652e43) { /* descend "tflite.C" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6f6d62696e657254) { /* descend "ombinerT" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 3);
                            if (buf != mark) {
                                buf = tflite_CombinerType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "ype" */
                            return unmatched;
                        } /* "ype" */
                    } else { /* descend "ombinerT" */
                        if (w == 0x7573746f6d4f7074) { /* descend "ustomOpt" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x696f6e73466f726d) { /* descend "ionsForm" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6174000000000000) { /* "at" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                                    if (buf != mark) {
                                        buf = tflite_CustomOptionsFormat_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "at" */
                                    return unmatched;
                                } /* "at" */
                            } else { /* descend "ionsForm" */
                                return unmatched;
                            } /* descend "ionsForm" */
                        } else { /* descend "ustomOpt" */
                            return unmatched;
                        } /* descend "ustomOpt" */
                    } /* descend "ombinerT" */
                } else { /* descend "tflite.C" */
                    return unmatched;
                } /* descend "tflite.C" */
            } /* descend "tflite.B" */
        } /* branch "tflite.B" */
    } else { /* branch "tflite.F" */
        if (w < 0x74666c6974652e4d) { /* branch "tflite.M" */
            if (w < 0x74666c6974652e4c) { /* branch "tflite.L" */
                if (w == 0x74666c6974652e46) { /* descend "tflite.F" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x756c6c79436f6e6e) { /* descend "ullyConn" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x65637465644f7074) { /* descend "ectedOpt" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x696f6e7357656967) { /* descend "ionsWeig" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x687473466f726d61) { /* descend "htsForma" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xff00000000000000) == 0x7400000000000000) { /* "t" */
                                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                                        if (buf != mark) {
                                            buf = tflite_FullyConnectedOptionsWeightsFormat_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                        } else {
                                            return unmatched;
                                        }
                                    } else { /* "t" */
                                        return unmatched;
                                    } /* "t" */
                                } else { /* descend "htsForma" */
                                    return unmatched;
                                } /* descend "htsForma" */
                            } else { /* descend "ionsWeig" */
                                return unmatched;
                            } /* descend "ionsWeig" */
                        } else { /* descend "ectedOpt" */
                            return unmatched;
                        } /* descend "ectedOpt" */
                    } else { /* descend "ullyConn" */
                        return unmatched;
                    } /* descend "ullyConn" */
                } else { /* descend "tflite.F" */
                    return unmatched;
                } /* descend "tflite.F" */
            } else { /* branch "tflite.L" */
                if (w == 0x74666c6974652e4c) { /* descend "tflite.L" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x534850726f6a6563) { /* descend "SHProjec" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x74696f6e54797065) { /* "tionType" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                            if (buf != mark) {
                                buf = tflite_LSHProjectionType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "tionType" */
                            return unmatched;
                        } /* "tionType" */
                    } else { /* descend "SHProjec" */
                        if (w == 0x53544d4b65726e65) { /* descend "STMKerne" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffff000000) == 0x6c54797065000000) { /* "lType" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                                if (buf != mark) {
                                    buf = tflite_LSTMKernelType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "lType" */
                                return unmatched;
                            } /* "lType" */
                        } else { /* descend "STMKerne" */
                            return unmatched;
                        } /* descend "STMKerne" */
                    } /* descend "SHProjec" */
                } else { /* descend "tflite.L" */
                    return unmatched;
                } /* descend "tflite.L" */
            } /* branch "tflite.L" */
        } else { /* branch "tflite.M" */
            if (w < 0x74666c6974652e50) { /* branch "tflite.P" */
                if (w == 0x74666c6974652e4d) { /* descend "tflite.M" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6972726f72506164) { /* descend "irrorPad" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffff00000000) == 0x4d6f646500000000) { /* "Mode" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                            if (buf != mark) {
                                buf = tflite_MirrorPadMode_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "Mode" */
                            return unmatched;
                        } /* "Mode" */
                    } else { /* descend "irrorPad" */
                        return unmatched;
                    } /* descend "irrorPad" */
                } else { /* descend "tflite.M" */
                    return unmatched;
                } /* descend "tflite.M" */
            } else { /* branch "tflite.P" */
                if (w < 0x74666c6974652e51) { /* branch "tflite.Q" */
                    if (w == 0x74666c6974652e50) { /* descend "tflite.P" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffff0000) == 0x616464696e670000) { /* "adding" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                            if (buf != mark) {
                                buf = tflite_Padding_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "adding" */
                            return unmatched;
                        } /* "adding" */
                    } else { /* descend "tflite.P" */
                        return unmatched;
                    } /* descend "tflite.P" */
                } else { /* branch "tflite.Q" */
                    if (w == 0x74666c6974652e51) { /* descend "tflite.Q" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x75616e74697a6174) { /* descend "uantizat" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x696f6e4465746169) { /* descend "ionDetai" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xffff000000000000) == 0x6c73000000000000) { /* "ls" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                                    if (buf != mark) {
                                        buf = tflite_QuantizationDetails_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "ls" */
                                    return unmatched;
                                } /* "ls" */
                            } else { /* descend "ionDetai" */
                                return unmatched;
                            } /* descend "ionDetai" */
                        } else { /* descend "uantizat" */
                            return unmatched;
                        } /* descend "uantizat" */
                    } else { /* descend "tflite.Q" */
                        if (w == 0x74666c6974652e54) { /* descend "tflite.T" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x656e736f72547970) { /* descend "ensorTyp" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                                    if (buf != mark) {
                                        buf = tflite_TensorType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                    } else {
                                        return unmatched;
                                    }
                                } else { /* "e" */
                                    return unmatched;
                                } /* "e" */
                            } else { /* descend "ensorTyp" */
                                return unmatched;
                            } /* descend "ensorTyp" */
                        } else { /* descend "tflite.T" */
                            return unmatched;
                        } /* descend "tflite.T" */
                    } /* descend "tflite.Q" */
                } /* branch "tflite.Q" */
            } /* branch "tflite.P" */
        } /* branch "tflite.M" */
    } /* branch "tflite.F" */
    return buf;
}

static int tflite_v3_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, int flags)
{
    flatcc_json_parser_t parser;
    flatcc_builder_ref_t root;

    ctx = ctx ? ctx : &parser;
    flatcc_json_parser_init(ctx, B, buf, buf + bufsiz, flags);
    if (flatcc_builder_start_buffer(B, "TFL3", 0, 0)) return -1;
    tflite_Model_parse_json_table(ctx, buf, buf + bufsiz, &root);
    if (ctx->error) {
        return ctx->error;
    }
    if (!flatcc_builder_end_buffer(B, root)) return -1;
    ctx->end_loc = buf;
    return 0;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* TFLITE_V3_JSON_PARSER_H */
